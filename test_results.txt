============================= test session starts ==============================
platform darwin -- Python 3.9.6, pytest-8.3.5, pluggy-1.5.0 -- /Users/jose/Documents/discord-bot/venv/bin/python3
cachedir: .pytest_cache
rootdir: /Users/jose/Documents/discord-bot
plugins: anyio-4.9.0, langsmith-0.3.42, cov-6.1.1
collecting ... collected 21 items

tests/test_agent_integration.py::test_balanced_suite[What data is currently cached?-expected_behavior0] PASSED [  4%]
tests/test_agent_integration.py::test_balanced_suite[Find messages containing \u2018AI ethics\u2019 in #\U0001f4daai-philosophy-ethics.-expected_behavior1] FAILED [  9%]
tests/test_agent_integration.py::test_balanced_suite[Show me the top 4 messages mentioning \u2018welcome\u2019 in #\U0001f4ddwelcome-rules.-expected_behavior2] FAILED [ 14%]
tests/test_agent_integration.py::test_balanced_suite[Search for \u2018use cases\u2019 with keyword \u2018roundtable\u2019 in #genai-use-case-roundtable, returning the top 3 results.-expected_behavior3] PASSED [ 19%]
tests/test_agent_integration.py::test_balanced_suite[List all messages by cristian_72225 in #\U0001f44bintroductions.-expected_behavior4] PASSED [ 23%]
tests/test_agent_integration.py::test_balanced_suite[Retrieve messages in channel ID 1365732945859444767 (\U0001f4e2announcements-admin) between 2025-04-20T00:00:00Z and 2025-04-25T23:59:59Z, top 5.-expected_behavior5] PASSED [ 28%]
tests/test_agent_integration.py::test_balanced_suite[Summarize messages from last weekend in #\U0001f3d8general-chat.-expected_behavior6] PASSED [ 33%]
tests/test_agent_integration.py::test_balanced_suite[Summarize messages from 2025-04-01 to 2025-04-30 in #\U0001f6e0ai-practical-applications as JSON.-expected_behavior7] PASSED [ 38%]
tests/test_agent_integration.py::test_balanced_suite[What were the key discussion points in #\U0001f916intro-to-agentic-ai between 2025-04-22 and 2025-04-24?-expected_behavior8] FAILED [ 42%]
tests/test_agent_integration.py::test_balanced_suite[Extract all skills mentioned by darkgago in #\U0001f6e0ai-practical-applications over the past month.-expected_behavior9] FAILED [ 47%]
tests/test_agent_integration.py::test_balanced_suite[Find the 3 most semantically similar messages to \u2018invite link restrictions\u2019 across all channels.-expected_behavior10] FAILED [ 52%]
tests/test_agent_integration.py::test_balanced_suite[-expected_behavior11] PASSED [ 57%]
tests/test_agent_integration.py::test_balanced_suite[Search messages from 2025-04-26 to 2025-04-23 in #\U0001f3d8general-chat.-expected_behavior12] FAILED [ 61%]
tests/test_agent_integration.py::test_balanced_suite[Search for \u2018bug\u2019 in #nonexistent-channel.-expected_behavior13] FAILED [ 66%]
tests/test_agent_integration.py::test_balanced_suite[Tell me something interesting.-expected_behavior14] FAILED [ 71%]
tests/test_agent_integration.py::test_balanced_suite[In #\U0001f4e5feedback-submissions, find the top 2 messages about \u2018suggestions\u2019 by laura.neder between last Friday and yesterday, then summarize them.-expected_behavior15] PASSED [ 76%]
tests/test_agent_integration.py::test_balanced_suite[What was discussed about \u2018help\u2019 on 2025-04-18 in the discord-help channel?-expected_behavior16] FAILED [ 80%]
tests/test_agent_integration.py::test_balanced_suite[Summarize this week in #\u2753q-and-a-questions as JSON and ensure the output has both `summary` and `note` fields.-expected_behavior17] FAILED [ 85%]
tests/test_agent_integration.py::test_balanced_suite[Give me the 5 most recent messages in #\U0001f3d8general-chat with jump URLs.-expected_behavior18] FAILED [ 90%]
tests/test_agent_integration.py::test_balanced_suite[Retrieve messages in channel ID 1364250555467300976 (\U0001f4e9midweek-request) between 2025-04-20 and 2025-04-25.-expected_behavior19] FAILED [ 95%]
tests/test_agent_integration.py::test_empty_query PASSED                 [100%]

=================================== FAILURES ===================================
_ test_balanced_suite[Find messages containing \u2018AI ethics\u2019 in #\U0001f4daai-philosophy-ethics.-expected_behavior1] _

query = 'Find messages containing ‘AI ethics’ in #📚ai-philosophy-ethics.'
expected_behavior = {'functionality': 'search'}

    @pytest.mark.parametrize("query,expected_behavior", [
        # 1. Validate data availability
        ("What data is currently cached?", {"functionality": "data_availability"}),
        # 2. Basic keyword search
        ("Find messages containing ‘AI ethics’ in #📚ai-philosophy-ethics.", {"functionality": "search"}),
        # 3. Top-K override
        ("Show me the top 4 messages mentioning ‘welcome’ in #📝welcome-rules.", {"functionality": "search"}),
        # 4. Hybrid keyword + semantic
        ("Search for ‘use cases’ with keyword ‘roundtable’ in #genai-use-case-roundtable, returning the top 3 results.", {"functionality": "search"}),
        # 5. Author filter
        ("List all messages by cristian_72225 in #👋introductions.", {"functionality": "search"}),
        # 6. Channel-ID filter with ISO times
        ("Retrieve messages in channel ID 1365732945859444767 (📢announcements-admin) between 2025-04-20T00:00:00Z and 2025-04-25T23:59:59Z, top 5.", {"functionality": "search"}),
        # 7. Plain-text summarization (relative)
        ("Summarize messages from last weekend in #🏘general-chat.", {"functionality": "summarize"}),
        # 8. JSON summarization (absolute)
        ("Summarize messages from 2025-04-01 to 2025-04-30 in #🛠ai-practical-applications as JSON.", {"functionality": "summarize"}),
        # 9. Plain-text summarization (absolute)
        ("What were the key discussion points in #🤖intro-to-agentic-ai between 2025-04-22 and 2025-04-24?", {"functionality": "summarize"}),
        # 10. Skill-term extraction
        ("Extract all skills mentioned by darkgago in #🛠ai-practical-applications over the past month.", {"functionality": "search"}),
        # 11. Semantic-only reranking
        ("Find the 3 most semantically similar messages to ‘invite link restrictions’ across all channels.", {"functionality": "search"}),
        # 12. Empty-query guard
        ("", {"functionality": "error_handling", "raises": ValueError, "msg": "Query cannot be empty"}),
        # 13. Invalid timeframe
        ("Search messages from 2025-04-26 to 2025-04-23 in #🏘general-chat.", {"functionality": "error_handling", "msg": "End time must be after start time"}),
        # 14. Unknown channel
        ("Search for ‘bug’ in #nonexistent-channel.", {"functionality": "error_handling", "msg": "Unknown channel"}),
        # 15. Fallback/clarification prompt
        ("Tell me something interesting.", {"functionality": "error_handling", "msg": "Which channel, timeframe, or keyword"}),
        # 16. Combined multi-criteria
        ("In #📥feedback-submissions, find the top 2 messages about ‘suggestions’ by laura.neder between last Friday and yesterday, then summarize them.", {"functionality": "summarize"}),
        # 17. Implicit channel name parsing
        ("What was discussed about ‘help’ on 2025-04-18 in the discord-help channel?", {"functionality": "search"}),
        # 18. JSON summary key validation
        ("Summarize this week in #❓q-and-a-questions as JSON and ensure the output has both `summary` and `note` fields.", {"functionality": "summarize", "json_keys": ["summary", "note"]}),
        # 19. Jump-URL accuracy
        ("Give me the 5 most recent messages in #🏘general-chat with jump URLs.", {"functionality": "search"}),
        # 20. Empty-channel search
        ("Retrieve messages in channel ID 1364250555467300976 (📩midweek-request) between 2025-04-20 and 2025-04-25.", {"functionality": "search", "expect_empty": True}),
    ])
    def test_balanced_suite(query, expected_behavior):
        if expected_behavior.get("raises"):
            with pytest.raises(expected_behavior["raises"]):
                get_agent_answer(query)
            return
        result = get_agent_answer(query)
        # Error handling/clarification/fallback
        if expected_behavior["functionality"] == "error_handling":
            if "msg" in expected_behavior:
                assert expected_behavior["msg"].lower() in str(result).lower()
            else:
                ai_eval = ai_validate_response(query, result, functionality="error_handling")
                assert ai_eval.startswith("PASS"), f"AI validation failed: {ai_eval}"
            return
        # JSON summary key validation
        if expected_behavior.get("json_keys"):
            assert isinstance(result, dict), "Expected JSON output"
            for key in expected_behavior["json_keys"]:
                assert key in result, f"Missing key '{key}' in JSON summary"
        # Expect empty result
        if expected_behavior.get("expect_empty"):
            assert result == [] or result == {} or not result, "Expected empty result for empty channel search"
            return
        # Standard AI validation
        ai_eval = ai_validate_response(query, result, functionality=expected_behavior["functionality"])
>       assert ai_eval.startswith("PASS"), f"AI validation failed: {ai_eval}"
E       AssertionError: AI validation failed: FAIL
E         
E         Explanation: The user's query is to find messages containing ‘AI ethics’ in #📚ai-philosophy-ethics. The agent's response appears to summarize or paraphrase message topics and themes relevant to AI ethics rather than explicitly returning messages that contain the phrase "AI ethics." Furthermore, the response does not provide metadata such as the actual author, precise timestamp, or jump URL for each message, which is required by the functionality specification. Without the original quoted messages and metadata, the response is incomplete.
E       assert False
E        +  where False = <built-in method startswith of str object at 0x107047800>('PASS')
E        +    where <built-in method startswith of str object at 0x107047800> = 'FAIL\n\nExplanation: The user\'s query is to find messages containing ‘AI ethics’ in #📚ai-philosophy-ethics. The agent\'s response appears to summarize or paraphrase message topics and themes relevant to AI ethics rather than explicitly returning messages that contain the phrase "AI ethics." Furthermore, the response does not provide metadata such as the actual author, precise timestamp, or jump URL for each message, which is required by the functionality specification. Without the original quoted messages and metadata, the response is incomplete.'.startswith

tests/test_agent_integration.py:148: AssertionError
----------------------------- Captured stdout call -----------------------------


[1m> Entering new AgentExecutor chain...[0m
[32;1m[1;3m
Invoking: `search_messages` with `{'keyword': 'AI ethics', 'channel_name': '📚ai-philosophy-ethics'}`


[0m[36;1m[1;3m[{'author': {'id': '1361976806651068517', 'username': 'andreahickethier', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 5, 6, 8, 47, 10, 530000), 'content': "📊 Community Digest – AI Philosophy & Ethics Channel (as of May 6)\nHey everyone! 👋\nWe've had a rich and evolving discussion here over the past weeks – so here’s a quick recap of the key themes.\nNot final – just a shared map of where we’ve been. Feel free to add missing threads!\n\n🧭 Main Discussion Clusters\n1️⃣ Global AI Ethics Charter\n🌐 Inspired by Salzburg Charter & UN ethics frameworks\n🛡️ Focus: open source duties, bias checks, contributor protection\n💡 Key voices: Prabhat Kumar, Marie Ribbelöv\n\n2️⃣ Ethics vs. Capital\n💰 Can ethics scale in a capitalist AI economy?\n🏛️ Debates: OpenAI’s model, hybrid governance (foundation + services)\n🧠 Big Q: “Does ethics scale like capital?”\n\n3️⃣ Transparency & Accountability\n🔍 What should vendors disclose when models fail?\n📉 Topics: hallucinations, sycophancy, GPT-4o rollback\n🍏 Case: Apple’s privacy-focused AI training\n\n4️⃣ AI Literacy & Responsibility\n👶 How do we prepare Gen Z & Alpha for ethical AI?\n📚 Shared: tools, humor, teaching ideas\n🙌 Thanks to: Shabana Islam & others\n\n5️⃣ Creative AI & IP\n🎨 Style prompts vs. plagiarism – homage or appropriation?\n🖼️ Case: Studio Ghibli-style generation\n⚖️ Discussion: authorship, intent & transparency\n\n6️⃣ Compliance, Law & Governance\n⚖️ Topics: liability, EU AI Act, audit systems\n📌 Discussed: Rana Plaza metaphor, corporate duty\n💬 Prompt: “How do we move from policy to practice?”\n\n💬 Missing something?\nReply below to add insights or open questions.\n\n🆕 Coming up this week for deep discussion:\nIt is my turn and I am preparing an Intro to ISO/IEC 42001 – a real-world AI governance framework.\nHelpful structure or just bureaucracy? I will share this on Wednesday.\n\nThanks for being part of this space 🙏", 'jump_url': 'https://discord.com/channels/1353058864810950737/1353448986408779877/1369234024295432193', 'channel_name': '📚ai-philosophy-ethics', 'guild_id': 1353058864810950737, 'channel_id': 1353448986408779877, 'message_id': 1369234024295432193}, {'author': {'id': '1359955242438889545', 'username': 'marie007532', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 4, 30, 11, 28, 40, 744000), 'content': '**MidWeek Discussion**\n*AI Philosophy & Ethics team propose to discuss OpenAI\'s business model*\n\nHeadline: Ex-OpenAI workers ask California and Delaware AGs to block for-profit conversion of ChatGPT maker\nSource / Date: Associated Press, April 23, 2025\nLink: https://apnews.com/article/openai-chatgpt-nonprofit-aad1fddb75a19008a1a349d1c972d476\n\nKey Insight: Former OpenAI employees, supported by Nobel laureates and AI experts, urge attorneys general to prevent OpenAI from shifting its nonprofit structure to a for-profit entity. They argue that such a move could undermine public accountability and ethical safeguards, especially as OpenAI progresses toward developing artificial general intelligence (AGI). OpenAI contends that any structural change would still support the public good through a public benefit corporation model while maintaining a nonprofit arm.\n\nQuestions: **Can a for-profit OpenAI remain ethically accountable in the race toward AGI?\u200b What structural safeguards might prevent ethical drift as AI organizations scale? Does the for-profit model undermine OpenAI\'s original mission to ensure that AGI benefits all of humanity?**\n\nBackground:\nOpenAI, founded in 2015 as a nonprofit to develop AGI for benefit of humanity, with focus on transparency and openness.\nAs AI research advanced, the costs of computing and development grew, and the nonprofit model couldn\'t attract enough capital to keep pace with competitors like Google DeepMind.\nIn 2019, OpenAI shifted to a "capped-profit" model by forming OpenAI LP, allowing investors to earn up to 100x their investment, while being controlled by a nonprofit parent. \nFor Profit reasons : attract investment, sustainability (financing longterm), competition (for scale & edge), commercialisation (monetisation). \nCriticism: some argue that the transition raises concerns about profit motives overshadowing OpenAI\'s mission, and about corporate interests influencing its direction.\n\nLet\'s debate !', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353448986408779877/1367100340805308447', 'channel_name': '📚ai-philosophy-ethics', 'guild_id': 1353058864810950737, 'channel_id': 1353448986408779877, 'message_id': 1367100340805308447}, {'author': {'id': '1349019079683473488', 'username': 'imkprabhat', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 5, 6, 20, 59, 32, 85000), 'content': 'Due to technical issue, we could not record the session, but thanks to the creative brain of <@1361976806651068517>  and her bots, here is the summary we captured -- 🧭 Summary, Evaluation & Next Steps: Global Charter for Ethical Open Source AI\n\n🌍 Purpose: Build a global charter for open-source AI ethics—balancing innovation, openness & accountability.\n\n🧠 Key Points:\n\nCurrent governance is either too closed (proprietary) or too risky (fully open); we need a middle path.\n\nProposal: A UN-style, non-binding charter with ethical principles, validation standards & global cooperation.\n\nInspired by lessons from SaaS: move from reactive ethics to proactive frameworks.\n\nTarget: 15-page draft built around 5 streams (Ethics, Validation, Monitoring, Governance, Coordination).\n\nAdditional ideas: AI literacy & engaging industry/policy via surveys or dialogue.\n\n📈 Project Evaluation:\n✅ Highly relevant with strong community value & impact potential\n✅ Structured, realistic concept with clear deliverables\n⚠️ Success depends on community commitment & expert validation\n⚠️ Risk of scope creep without tight coordination\n\n❓ Key Questions:\n\nHow can we effectively include industry and policy stakeholders?\n\nWhat are the minimum standards for ethical model labeling?\n\nShould AI literacy be a side initiative or integrated into the Charter?\n\nWhich use cases or sectors should we prioritize for the Charter?\n\n✅ Agreed Next Steps:\n\n📌 Define 5 workstreams & collect volunteers (via shared doc)\n\n📅 Weekly sync calls (Tuesdays, ET)\n\n🎥 Host a Part 2 session with broader community + recording\n\n🧑\u200d🏫 Schedule short expert interview with Dr. Sanchez\n\n📣 Share deck & info more widely via Discord/announcements\n\n📬 Please share your interest or questions here—or sign up directly in the doc!', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353448986408779877/1369418328535207986', 'channel_name': '📚ai-philosophy-ethics', 'guild_id': 1353058864810950737, 'channel_id': 1353448986408779877, 'message_id': 1369418328535207986}, {'author': {'id': '1364956984318754887', 'username': 'daguerreros7', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 5, 12, 14, 53, 14, 70000), 'content': 'Dear fellow "Ethical AI lovers"...\n\nAccording to the action plan proposed in our last Saturday\'s session, tomorrow it would be the first  meeting regarding to start the collaborator´s streams.\n\n If this session succeeds, I won´t be able to attend, due to a meeting with our country´s bank regulators I have to attend. \n\nCount me in with the "Ethics and Principles" stream.', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353448986408779877/1371500473252581557', 'channel_name': '📚ai-philosophy-ethics', 'guild_id': 1353058864810950737, 'channel_id': 1353448986408779877, 'message_id': 1371500473252581557}, {'author': {'id': '1335299567440367757', 'username': 'apoorvgarg88', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 4, 23, 12, 47, 9, 329000), 'content': '**Engaging with the AI Art Revolution: A Call for Community Mid-Week Discussion**\n\n**Headline**: UB art professors weigh in on the AI debate\n\n**Source / Date:** The Spectrum (University at Buffalo), April 8, 2025\n\n**Link**: https://www.ubspectrum.com/article/2025/04/ub-art-professors-weigh-in-on-the-ai-debate?ct=content_open&cv=cbox_featured\n\n**Summary:** This article discusses the viral “Ghibli AI Trend,” where users prompt generative AI models like Midjourney and DALL-E to create images in the iconic Studio Ghibli art style. While many celebrate the creative possibilities, the piece highlights concerns from art professors about copyright, ethics, and whether AI-generated art disrespects original creators. The debate centers on whether such trends democratize creativity or undermine artistic integrity and intellectual property.\n\n**Action Step: **\nCreate an AI image in a famous art style and share it here. Join the Ghibli AI art trend.\n*Note: For personal and non-commercial use only.\n\n** We invite all our community members to join this discussion.**\n\n**Question to All:** \nWhen you use AI to mimic a famous art style, is it creative homage or unethical appropriation? Why?', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353448986408779877/1364583374983008346', 'channel_name': '📚ai-philosophy-ethics', 'guild_id': 1353058864810950737, 'channel_id': 1353448986408779877, 'message_id': 1364583374983008346}][0m[32;1m[1;3mHere are recent messages containing "AI ethics" in #📚ai-philosophy-ethics:

1. Community Digest – AI Philosophy & Ethics Channel (May 6)
Summary of key themes: Global AI Ethics Charter, ethics vs. capital, transparency, AI literacy, creative AI & IP, compliance, law & governance. Upcoming: Intro to ISO/IEC 42001 for AI governance.
Read the full message

2. MidWeek Discussion: OpenAI's Business Model
Debate on whether a for-profit OpenAI can remain ethically accountable in the race toward AGI, and what structural safeguards are needed to prevent ethical drift.
Read the full message

3. Global Charter for Ethical Open Source AI
Summary and next steps for building a global charter for open-source AI ethics, including workstreams on ethics, validation, monitoring, governance, and coordination.
Read the full message

4. "Ethical AI lovers" – Collaborator Streams
Announcement about joining the "Ethics and Principles" stream for a collaborative project on AI ethics.
Read the full message

5. AI Art Revolution: Ethics of AI-Generated Art
Discussion on whether using AI to mimic famous art styles is creative homage or unethical appropriation, with a focus on copyright and artistic integrity.
Read the full message

Let me know if you want the full text of any specific message or a summary of the discussions![0m

[1m> Finished chain.[0m
_ test_balanced_suite[Show me the top 4 messages mentioning \u2018welcome\u2019 in #\U0001f4ddwelcome-rules.-expected_behavior2] _

query = 'Show me the top 4 messages mentioning ‘welcome’ in #📝welcome-rules.'
expected_behavior = {'functionality': 'search'}

    @pytest.mark.parametrize("query,expected_behavior", [
        # 1. Validate data availability
        ("What data is currently cached?", {"functionality": "data_availability"}),
        # 2. Basic keyword search
        ("Find messages containing ‘AI ethics’ in #📚ai-philosophy-ethics.", {"functionality": "search"}),
        # 3. Top-K override
        ("Show me the top 4 messages mentioning ‘welcome’ in #📝welcome-rules.", {"functionality": "search"}),
        # 4. Hybrid keyword + semantic
        ("Search for ‘use cases’ with keyword ‘roundtable’ in #genai-use-case-roundtable, returning the top 3 results.", {"functionality": "search"}),
        # 5. Author filter
        ("List all messages by cristian_72225 in #👋introductions.", {"functionality": "search"}),
        # 6. Channel-ID filter with ISO times
        ("Retrieve messages in channel ID 1365732945859444767 (📢announcements-admin) between 2025-04-20T00:00:00Z and 2025-04-25T23:59:59Z, top 5.", {"functionality": "search"}),
        # 7. Plain-text summarization (relative)
        ("Summarize messages from last weekend in #🏘general-chat.", {"functionality": "summarize"}),
        # 8. JSON summarization (absolute)
        ("Summarize messages from 2025-04-01 to 2025-04-30 in #🛠ai-practical-applications as JSON.", {"functionality": "summarize"}),
        # 9. Plain-text summarization (absolute)
        ("What were the key discussion points in #🤖intro-to-agentic-ai between 2025-04-22 and 2025-04-24?", {"functionality": "summarize"}),
        # 10. Skill-term extraction
        ("Extract all skills mentioned by darkgago in #🛠ai-practical-applications over the past month.", {"functionality": "search"}),
        # 11. Semantic-only reranking
        ("Find the 3 most semantically similar messages to ‘invite link restrictions’ across all channels.", {"functionality": "search"}),
        # 12. Empty-query guard
        ("", {"functionality": "error_handling", "raises": ValueError, "msg": "Query cannot be empty"}),
        # 13. Invalid timeframe
        ("Search messages from 2025-04-26 to 2025-04-23 in #🏘general-chat.", {"functionality": "error_handling", "msg": "End time must be after start time"}),
        # 14. Unknown channel
        ("Search for ‘bug’ in #nonexistent-channel.", {"functionality": "error_handling", "msg": "Unknown channel"}),
        # 15. Fallback/clarification prompt
        ("Tell me something interesting.", {"functionality": "error_handling", "msg": "Which channel, timeframe, or keyword"}),
        # 16. Combined multi-criteria
        ("In #📥feedback-submissions, find the top 2 messages about ‘suggestions’ by laura.neder between last Friday and yesterday, then summarize them.", {"functionality": "summarize"}),
        # 17. Implicit channel name parsing
        ("What was discussed about ‘help’ on 2025-04-18 in the discord-help channel?", {"functionality": "search"}),
        # 18. JSON summary key validation
        ("Summarize this week in #❓q-and-a-questions as JSON and ensure the output has both `summary` and `note` fields.", {"functionality": "summarize", "json_keys": ["summary", "note"]}),
        # 19. Jump-URL accuracy
        ("Give me the 5 most recent messages in #🏘general-chat with jump URLs.", {"functionality": "search"}),
        # 20. Empty-channel search
        ("Retrieve messages in channel ID 1364250555467300976 (📩midweek-request) between 2025-04-20 and 2025-04-25.", {"functionality": "search", "expect_empty": True}),
    ])
    def test_balanced_suite(query, expected_behavior):
        if expected_behavior.get("raises"):
            with pytest.raises(expected_behavior["raises"]):
                get_agent_answer(query)
            return
        result = get_agent_answer(query)
        # Error handling/clarification/fallback
        if expected_behavior["functionality"] == "error_handling":
            if "msg" in expected_behavior:
                assert expected_behavior["msg"].lower() in str(result).lower()
            else:
                ai_eval = ai_validate_response(query, result, functionality="error_handling")
                assert ai_eval.startswith("PASS"), f"AI validation failed: {ai_eval}"
            return
        # JSON summary key validation
        if expected_behavior.get("json_keys"):
            assert isinstance(result, dict), "Expected JSON output"
            for key in expected_behavior["json_keys"]:
                assert key in result, f"Missing key '{key}' in JSON summary"
        # Expect empty result
        if expected_behavior.get("expect_empty"):
            assert result == [] or result == {} or not result, "Expected empty result for empty channel search"
            return
        # Standard AI validation
        ai_eval = ai_validate_response(query, result, functionality=expected_behavior["functionality"])
>       assert ai_eval.startswith("PASS"), f"AI validation failed: {ai_eval}"
E       AssertionError: AI validation failed: FAIL
E         
E         Explanation: The agent’s response does not include the required message metadata such as author and timestamp. Additionally, the summarized text does not make it clear whether the messages explicitly mention "welcome" or are simply parts of a rules list titled "Welcome & Rules." The query requires the top 4 messages mentioning 'welcome' in #📝welcome-rules (matching by keyword, not just messages with “welcome” in the title or section header), and the actual message excerpts or content containing 'welcome' should be included to verify relevance. The response lacks both message content and all necessary metadata specified in the instructions.
E       assert False
E        +  where False = <built-in method startswith of str object at 0x10700ac00>('PASS')
E        +    where <built-in method startswith of str object at 0x10700ac00> = 'FAIL\n\nExplanation: The agent’s response does not include the required message metadata such as author and timestamp. Additionally, the summarized text does not make it clear whether the messages explicitly mention "welcome" or are simply parts of a rules list titled "Welcome & Rules." The query requires the top 4 messages mentioning \'welcome\' in #📝welcome-rules (matching by keyword, not just messages with “welcome” in the title or section header), and the actual message excerpts or content containing \'welcome\' should be included to verify relevance. The response lacks both message content and all necessary metadata specified in the instructions.'.startswith

tests/test_agent_integration.py:148: AssertionError
----------------------------- Captured stdout call -----------------------------


[1m> Entering new AgentExecutor chain...[0m
[32;1m[1;3m
Invoking: `search_messages` with `{'keyword': 'welcome', 'k': 4, 'channel_name': '📝welcome-rules'}`


[0m[36;1m[1;3m[{'author': {'id': '1352785241252565174', 'username': 'oscarsan.chez', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 4, 24, 1, 21, 11, 926000), 'content': "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n🔐 Welcome & Rules – Part 3 || 📜 Community Rules\n\n\U0001faf6 Respect and Tolerance: Treat all members with respect. No forms of harassment, witch‑hunting, sexism, racism, or any other type of hate speech will be tolerated. Violating this rule will result in immediate expulsion to maintain a safe and welcoming environment.\n\n🚫 No Spam: Do not spam or self‑promote (including server invites, advertisements, brand promotions, etc.) without team permission. Share only relevant links and resources that add value to the community.\n\n🔒 Confidentiality: Do not disclose personal or contact information of members without their explicit consent, including photos or any private data.\n\n***NOTE: Per guidance from Oscar and Dr. Sanchez (our founders), all members are required to share their real identity{In there UserName}. Refusal to do so is considered a security risk and may result in removal from the community. This policy is in place to maintain a safe and trustworthy environment for all participants.\n\n🛡️ Moderation: Moderators have the final authority in resolving conflicts and may modify the rules to preserve the quality of discussions. If you observe anything contrary to the rules or that compromises your safety, immediately inform the staff. We value your feedback to improve the community.\n\n📚 Appropriate Content: It is prohibited to share illegal, unofficial, age‑restricted, or obscene content, including texts, images, nicknames, or links that contain nudity, sex, excessive violence, or disturbing content. Keep all content appropriate and professional for a collaborative environment.\n\n🔊 For Voice Chat: Reduce background noise, use the push‑to‑talk option only when necessary. Moderators have the right to disconnect, mute, deafen, or move members from voice channels to ensure the quality of communication.\n\n🤖 Use of AI Tools and Citations: When using AI tools, ensure to correctly cite the source, including the name of the tool, the URL, and specific details of use. For example, APA guidelines require you to include the author's name of the AI tool, the title, the URL, and the date of access.\n\n© Copyright: Let us respect copyright when sharing information. Share only content that is your own or properly licensed. It is not permitted to infringe intellectual property rights.\n\n✉️ Invitations and Admission: Do not invite unofficial bots or people outside the community without an explicit request and approval from the staff. The team reserves the right of admission to maintain the integrity and purpose of our community.\n\n🛠 Feedback System Required for Changes: All server changes and optimizations — whether from general members or Community Coordinators — must be submitted through the official 🧠 Feedback System outlined in the next step. To protect the structure and flow of the server, bypassing this process may result in removal from the community. We value transparency and order to ensure everyone’s voice is heard through the proper channels. 🔁🔒\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------", 'jump_url': 'https://discord.com/channels/1353058864810950737/1353442557438328864/1364773136188313601', 'channel_name': '📝welcome-rules', 'guild_id': 1353058864810950737, 'channel_id': 1353442557438328864, 'message_id': 1364773136188313601}, {'author': {'id': '1352785241252565174', 'username': 'oscarsan.chez', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 4, 24, 1, 12, 3, 328000), 'content': '---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n🔐 Welcome & Rules – Part 2\nManaging External Requests to Join Our Community 🌍\n\n👇 Please review how we handle incoming join requests from outside the server to ensure a smooth and secure onboarding experience!\n\n🚥  How to manage external requests to join this community\n✅  Follow this protocol (v1.1) when someone from outside the community contacts you requesting to join.\n⛔  Never share the server link. Follow this protocol instead. Sharing the link without prior permission will result in a ban from the Discord server.\nContact the coordinators if in doubt. Thank you.\nCredit to <@1359966236473168188> for drafting the doc.\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353442557438328864/1364770835201527880', 'channel_name': '📝welcome-rules', 'guild_id': 1353058864810950737, 'channel_id': 1353442557438328864, 'message_id': 1364770835201527880}, {'author': {'id': '1352785241252565174', 'username': 'oscarsan.chez', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 4, 24, 1, 43, 48, 14000), 'content': '---------------------------------------------------------------------------------------------------------------------------------------------------------\n\n🎤 Welcome & Rules – Part 5\n\n🗓️ Live Events on the Gen AI Global Server\n\nWe believe that real-time collaboration — both online and offline — is essential for building a strong, high-impact community. Here’s what you can expect:\n------------------------------------------------------------------------------------------\n\n🧠 Bi-Monthly GenAI Use-Case Roundtable\n\n🔁 Every Two Months\n📍 Live Voice Chat or Scheduled Stage Event (Discord)\n🎯 Industry Focus: Rotates by domain (e.g., AI in Healthcare, Finance, EdTech)\n\n• 🎙 Members & guest experts showcase real-world GenAI applications\n• 💬 Open forum for questions, insights, and constructive feedback\n• 🔎 Practical use cases bridge conceptual learning and enterprise execution\n• 🚀 Great visibility for ambitious members to shine as thought leaders\n------------------------------------------------------------------------------------------\n\n🤝 Bi-Monthly In-Person Meetups\n\n📍 Held in major cities — every two months\n🧭 Designed for: Real-world networking, buddy check-ins, team bonding, and photo ops\n🗳 Community decides dates & locations via polls\n🗂️ Roles:\n• Conversational Leaders lead activities\n• Discord Managers support logistics\n• Network Architects align with strategy & extract insights\n📸 Members are encouraged to post event recaps to keep the momentum flowing\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353442557438328864/1364778824033898537', 'channel_name': '📝welcome-rules', 'guild_id': 1353058864810950737, 'channel_id': 1353442557438328864, 'message_id': 1364778824033898537}, {'author': {'id': '1352785241252565174', 'username': 'oscarsan.chez', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 4, 24, 1, 34, 36, 159000), 'content': '---------------------------------------------------------------------------------------------------------------------------------------------------------\n\n🔧 Welcome & Rules – Part 4\n🗣️ The Feedback System for Coordinators & General Members\n\nTo ensure every voice has a fair chance at shaping this community, we’ve built a clear system for suggesting changes and enhancements. Follow each step closely to get your ideas seen, supported, and possibly implemented! 🛠️✨\n\n🧠 #feedback-workshop\n• 💡 Brainstorm + refine Discord optimization ideas.\n• 🤝 Collaborate freely; sketches and rough drafts welcome.\n• 📤 When your concept feels solid, pass it to #feedback-submissions.\n\n📥 #feedback-submissions\n• 🚀 Drop polished proposals here for community review.\n• 👍 React-votes determine popularity — hype the ideas you love!\n• ⏫ Top-liked concepts are queued for the monthly poll in #feedback-polls.\n• ⏲️ Slow-mode: 6 hours — make it count before hitting send!\n\n🗳 #feedback-polls\n• 📅 First Friday of the Month — Poll goes live. Vote by Saturday 11:59 PM ET.\n• 🗓️ Sunday: Community Coordinator Roundtable — they debate the top ideas.\n• 🤝 Final review by Oscar Sanchez & Dr. Abel for implementation feasibility.\n• 🏆 Two winners: one from Coordinators, one from General Members.\n• ✅ Winners move forward to implementation — tracked in #announcements.\n• 🔔 Missed the deadline? Next month’s your shot!\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353442557438328864/1364776509385998478', 'channel_name': '📝welcome-rules', 'guild_id': 1353058864810950737, 'channel_id': 1353442557438328864, 'message_id': 1364776509385998478}][0m[32;1m[1;3mHere are the top 4 messages mentioning ‘welcome’ in #📝welcome-rules:

1. 🔐 Welcome & Rules – Part 3 || 📜 Community Rules  
Includes guidelines on respect, confidentiality, moderation, content, and more to maintain a safe and welcoming environment.  
[Read the full message](https://discord.com/channels/1353058864810950737/1353442557438328864/1364773136188313601)

2. 🔐 Welcome & Rules – Part 2  
Explains how to manage external requests to join the community and stresses not to share the server link without permission.  
[Read the full message](https://discord.com/channels/1353058864810950737/1353442557438328864/1364770835201527880)

3. 🎤 Welcome & Rules – Part 5  
Describes live events, both online and in-person, to foster collaboration and networking within the community.  
[Read the full message](https://discord.com/channels/1353058864810950737/1353442557438328864/1364778824033898537)

4. 🔧 Welcome & Rules – Part 4  
Outlines the feedback system for members and coordinators to suggest and vote on community improvements.  
[Read the full message](https://discord.com/channels/1353058864810950737/1353442557438328864/1364776509385998478)

Let me know if you’d like a summary or more details from any of these![0m

[1m> Finished chain.[0m
_ test_balanced_suite[What were the key discussion points in #\U0001f916intro-to-agentic-ai between 2025-04-22 and 2025-04-24?-expected_behavior8] _

query = 'What were the key discussion points in #🤖intro-to-agentic-ai between 2025-04-22 and 2025-04-24?'

    def get_agent_answer(query: str) -> Any:
        """
        Send the user's raw query to the function-calling agent.
    
        Args:
            query: The user's question or request
    
        Returns:
            The agent's response
    
        Raises:
            ValueError: If the query is empty
            Exception: For other errors during agent execution
        """
        if not query.strip():
            raise ValueError("Query cannot be empty")
    
        try:
>           return agent.run(query)

core/agent.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.9/site-packages/langchain_core/_api/deprecation.py:191: in warning_emitting_wrapper
    return wrapped(*args, **kwargs)
venv/lib/python3.9/site-packages/langchain/chains/base.py:603: in run
    return self(args[0], callbacks=callbacks, tags=tags, metadata=metadata)[
venv/lib/python3.9/site-packages/langchain_core/_api/deprecation.py:191: in warning_emitting_wrapper
    return wrapped(*args, **kwargs)
venv/lib/python3.9/site-packages/langchain/chains/base.py:386: in __call__
    return self.invoke(
venv/lib/python3.9/site-packages/langchain/chains/base.py:167: in invoke
    raise e
venv/lib/python3.9/site-packages/langchain/chains/base.py:157: in invoke
    self._call(inputs, run_manager=run_manager)
venv/lib/python3.9/site-packages/langchain/agents/agent.py:1620: in _call
    next_step_output = self._take_next_step(
venv/lib/python3.9/site-packages/langchain/agents/agent.py:1326: in _take_next_step
    [
venv/lib/python3.9/site-packages/langchain/agents/agent.py:1326: in <listcomp>
    [
venv/lib/python3.9/site-packages/langchain/agents/agent.py:1411: in _iter_next_step
    yield self._perform_agent_action(
venv/lib/python3.9/site-packages/langchain/agents/agent.py:1433: in _perform_agent_action
    observation = tool.run(
venv/lib/python3.9/site-packages/langchain_core/tools/base.py:774: in run
    raise error_to_raise
venv/lib/python3.9/site-packages/langchain_core/tools/base.py:743: in run
    response = context.run(self._run, *tool_args, **tool_kwargs)
venv/lib/python3.9/site-packages/langchain_core/tools/structured.py:93: in _run
    return self.func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

start_iso = '2025-04-22T00:00:00+00:00', end_iso = '2025-04-24T23:59:59+00:00'
guild_id = None, channel_id = None, channel_name = '🤖intro-to-agentic-ai'
as_json = False

    def summarize_messages(
        start_iso: str,
        end_iso: str,
        guild_id: Optional[int] = None,
        channel_id: Optional[int] = None,
        channel_name: Optional[str] = None,
        as_json: bool = False
    ) -> Union[str, Dict[str, Any]]:
        """
        Summarize all messages in [start_iso, end_iso].
        Returns either a text summary or JSON, per `as_json`.
        """
        # Debug logging
        print(f"\nDEBUG: Query Parameters:")
        print(f"Start ISO: {start_iso}")
        print(f"End ISO: {end_iso}")
        print(f"Guild ID: {guild_id}")
        print(f"Channel ID: {channel_id}")
        print(f"Channel Name: {channel_name}")
    
        # Validate IDs
        if guild_id is not None and not validate_guild_id(guild_id):
            raise ValueError(f"Invalid guild ID format: {guild_id}")
    
        if channel_id is not None and not validate_channel_id(channel_id):
            raise ValueError(f"Invalid channel ID format: {channel_id}")
    
        if channel_name is not None and not validate_channel_name(channel_name):
            raise ValueError(f"Invalid channel name format: {channel_name}")
    
        # validate time inputs
        try:
            # Handle 'Z' suffix for UTC
            if isinstance(start_iso, str) and start_iso.endswith('Z'):
                start_iso = start_iso.replace('Z', '+00:00')
            if isinstance(end_iso, str) and end_iso.endswith('Z'):
                end_iso = end_iso.replace('Z', '+00:00')
            start = datetime.fromisoformat(start_iso)
            end = datetime.fromisoformat(end_iso)
            if end < start:
                raise ValueError("End time must be after start time")
            # Debug logging
            print(f"\nDEBUG: Parsed Timestamps:")
            print(f"Start: {start}")
            print(f"End: {end}")
        except Exception as e:
            raise ValueError(f"Invalid ISO datetime: {e}")
    
        # resolve channel_name → channel_id
        if channel_name and not channel_id:
            channel_id = resolve_channel_name(channel_name, guild_id)
            if not channel_id:
>               raise ValueError(f"Unknown channel: {channel_name}")
E               ValueError: Unknown channel: 🤖intro-to-agentic-ai

tools/tools.py:292: ValueError

During handling of the above exception, another exception occurred:

query = 'What were the key discussion points in #🤖intro-to-agentic-ai between 2025-04-22 and 2025-04-24?'
expected_behavior = {'functionality': 'summarize'}

    @pytest.mark.parametrize("query,expected_behavior", [
        # 1. Validate data availability
        ("What data is currently cached?", {"functionality": "data_availability"}),
        # 2. Basic keyword search
        ("Find messages containing ‘AI ethics’ in #📚ai-philosophy-ethics.", {"functionality": "search"}),
        # 3. Top-K override
        ("Show me the top 4 messages mentioning ‘welcome’ in #📝welcome-rules.", {"functionality": "search"}),
        # 4. Hybrid keyword + semantic
        ("Search for ‘use cases’ with keyword ‘roundtable’ in #genai-use-case-roundtable, returning the top 3 results.", {"functionality": "search"}),
        # 5. Author filter
        ("List all messages by cristian_72225 in #👋introductions.", {"functionality": "search"}),
        # 6. Channel-ID filter with ISO times
        ("Retrieve messages in channel ID 1365732945859444767 (📢announcements-admin) between 2025-04-20T00:00:00Z and 2025-04-25T23:59:59Z, top 5.", {"functionality": "search"}),
        # 7. Plain-text summarization (relative)
        ("Summarize messages from last weekend in #🏘general-chat.", {"functionality": "summarize"}),
        # 8. JSON summarization (absolute)
        ("Summarize messages from 2025-04-01 to 2025-04-30 in #🛠ai-practical-applications as JSON.", {"functionality": "summarize"}),
        # 9. Plain-text summarization (absolute)
        ("What were the key discussion points in #🤖intro-to-agentic-ai between 2025-04-22 and 2025-04-24?", {"functionality": "summarize"}),
        # 10. Skill-term extraction
        ("Extract all skills mentioned by darkgago in #🛠ai-practical-applications over the past month.", {"functionality": "search"}),
        # 11. Semantic-only reranking
        ("Find the 3 most semantically similar messages to ‘invite link restrictions’ across all channels.", {"functionality": "search"}),
        # 12. Empty-query guard
        ("", {"functionality": "error_handling", "raises": ValueError, "msg": "Query cannot be empty"}),
        # 13. Invalid timeframe
        ("Search messages from 2025-04-26 to 2025-04-23 in #🏘general-chat.", {"functionality": "error_handling", "msg": "End time must be after start time"}),
        # 14. Unknown channel
        ("Search for ‘bug’ in #nonexistent-channel.", {"functionality": "error_handling", "msg": "Unknown channel"}),
        # 15. Fallback/clarification prompt
        ("Tell me something interesting.", {"functionality": "error_handling", "msg": "Which channel, timeframe, or keyword"}),
        # 16. Combined multi-criteria
        ("In #📥feedback-submissions, find the top 2 messages about ‘suggestions’ by laura.neder between last Friday and yesterday, then summarize them.", {"functionality": "summarize"}),
        # 17. Implicit channel name parsing
        ("What was discussed about ‘help’ on 2025-04-18 in the discord-help channel?", {"functionality": "search"}),
        # 18. JSON summary key validation
        ("Summarize this week in #❓q-and-a-questions as JSON and ensure the output has both `summary` and `note` fields.", {"functionality": "summarize", "json_keys": ["summary", "note"]}),
        # 19. Jump-URL accuracy
        ("Give me the 5 most recent messages in #🏘general-chat with jump URLs.", {"functionality": "search"}),
        # 20. Empty-channel search
        ("Retrieve messages in channel ID 1364250555467300976 (📩midweek-request) between 2025-04-20 and 2025-04-25.", {"functionality": "search", "expect_empty": True}),
    ])
    def test_balanced_suite(query, expected_behavior):
        if expected_behavior.get("raises"):
            with pytest.raises(expected_behavior["raises"]):
                get_agent_answer(query)
            return
>       result = get_agent_answer(query)

tests/test_agent_integration.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = 'What were the key discussion points in #🤖intro-to-agentic-ai between 2025-04-22 and 2025-04-24?'

    def get_agent_answer(query: str) -> Any:
        """
        Send the user's raw query to the function-calling agent.
    
        Args:
            query: The user's question or request
    
        Returns:
            The agent's response
    
        Raises:
            ValueError: If the query is empty
            Exception: For other errors during agent execution
        """
        if not query.strip():
            raise ValueError("Query cannot be empty")
    
        try:
            return agent.run(query)
        except Exception as e:
>           raise Exception(f"Agent failed to process query: {str(e)}")
E           Exception: Agent failed to process query: Unknown channel: 🤖intro-to-agentic-ai

core/agent.py:113: Exception
----------------------------- Captured stdout call -----------------------------


[1m> Entering new AgentExecutor chain...[0m
[32;1m[1;3m
Invoking: `summarize_messages` with `{'start_iso': '2025-04-22T00:00:00Z', 'end_iso': '2025-04-24T23:59:59Z', 'channel_name': '🤖intro-to-agentic-ai'}`


[0m
DEBUG: Query Parameters:
Start ISO: 2025-04-22T00:00:00Z
End ISO: 2025-04-24T23:59:59Z
Guild ID: None
Channel ID: None
Channel Name: 🤖intro-to-agentic-ai

DEBUG: Parsed Timestamps:
Start: 2025-04-22 00:00:00+00:00
End: 2025-04-24 23:59:59+00:00
_ test_balanced_suite[Extract all skills mentioned by darkgago in #\U0001f6e0ai-practical-applications over the past month.-expected_behavior9] _

query = 'Extract all skills mentioned by darkgago in #🛠ai-practical-applications over the past month.'
expected_behavior = {'functionality': 'search'}

    @pytest.mark.parametrize("query,expected_behavior", [
        # 1. Validate data availability
        ("What data is currently cached?", {"functionality": "data_availability"}),
        # 2. Basic keyword search
        ("Find messages containing ‘AI ethics’ in #📚ai-philosophy-ethics.", {"functionality": "search"}),
        # 3. Top-K override
        ("Show me the top 4 messages mentioning ‘welcome’ in #📝welcome-rules.", {"functionality": "search"}),
        # 4. Hybrid keyword + semantic
        ("Search for ‘use cases’ with keyword ‘roundtable’ in #genai-use-case-roundtable, returning the top 3 results.", {"functionality": "search"}),
        # 5. Author filter
        ("List all messages by cristian_72225 in #👋introductions.", {"functionality": "search"}),
        # 6. Channel-ID filter with ISO times
        ("Retrieve messages in channel ID 1365732945859444767 (📢announcements-admin) between 2025-04-20T00:00:00Z and 2025-04-25T23:59:59Z, top 5.", {"functionality": "search"}),
        # 7. Plain-text summarization (relative)
        ("Summarize messages from last weekend in #🏘general-chat.", {"functionality": "summarize"}),
        # 8. JSON summarization (absolute)
        ("Summarize messages from 2025-04-01 to 2025-04-30 in #🛠ai-practical-applications as JSON.", {"functionality": "summarize"}),
        # 9. Plain-text summarization (absolute)
        ("What were the key discussion points in #🤖intro-to-agentic-ai between 2025-04-22 and 2025-04-24?", {"functionality": "summarize"}),
        # 10. Skill-term extraction
        ("Extract all skills mentioned by darkgago in #🛠ai-practical-applications over the past month.", {"functionality": "search"}),
        # 11. Semantic-only reranking
        ("Find the 3 most semantically similar messages to ‘invite link restrictions’ across all channels.", {"functionality": "search"}),
        # 12. Empty-query guard
        ("", {"functionality": "error_handling", "raises": ValueError, "msg": "Query cannot be empty"}),
        # 13. Invalid timeframe
        ("Search messages from 2025-04-26 to 2025-04-23 in #🏘general-chat.", {"functionality": "error_handling", "msg": "End time must be after start time"}),
        # 14. Unknown channel
        ("Search for ‘bug’ in #nonexistent-channel.", {"functionality": "error_handling", "msg": "Unknown channel"}),
        # 15. Fallback/clarification prompt
        ("Tell me something interesting.", {"functionality": "error_handling", "msg": "Which channel, timeframe, or keyword"}),
        # 16. Combined multi-criteria
        ("In #📥feedback-submissions, find the top 2 messages about ‘suggestions’ by laura.neder between last Friday and yesterday, then summarize them.", {"functionality": "summarize"}),
        # 17. Implicit channel name parsing
        ("What was discussed about ‘help’ on 2025-04-18 in the discord-help channel?", {"functionality": "search"}),
        # 18. JSON summary key validation
        ("Summarize this week in #❓q-and-a-questions as JSON and ensure the output has both `summary` and `note` fields.", {"functionality": "summarize", "json_keys": ["summary", "note"]}),
        # 19. Jump-URL accuracy
        ("Give me the 5 most recent messages in #🏘general-chat with jump URLs.", {"functionality": "search"}),
        # 20. Empty-channel search
        ("Retrieve messages in channel ID 1364250555467300976 (📩midweek-request) between 2025-04-20 and 2025-04-25.", {"functionality": "search", "expect_empty": True}),
    ])
    def test_balanced_suite(query, expected_behavior):
        if expected_behavior.get("raises"):
            with pytest.raises(expected_behavior["raises"]):
                get_agent_answer(query)
            return
        result = get_agent_answer(query)
        # Error handling/clarification/fallback
        if expected_behavior["functionality"] == "error_handling":
            if "msg" in expected_behavior:
                assert expected_behavior["msg"].lower() in str(result).lower()
            else:
                ai_eval = ai_validate_response(query, result, functionality="error_handling")
                assert ai_eval.startswith("PASS"), f"AI validation failed: {ai_eval}"
            return
        # JSON summary key validation
        if expected_behavior.get("json_keys"):
            assert isinstance(result, dict), "Expected JSON output"
            for key in expected_behavior["json_keys"]:
                assert key in result, f"Missing key '{key}' in JSON summary"
        # Expect empty result
        if expected_behavior.get("expect_empty"):
            assert result == [] or result == {} or not result, "Expected empty result for empty channel search"
            return
        # Standard AI validation
        ai_eval = ai_validate_response(query, result, functionality=expected_behavior["functionality"])
>       assert ai_eval.startswith("PASS"), f"AI validation failed: {ai_eval}"
E       AssertionError: AI validation failed: FAIL
E         
E         Explanation: The response provides a summary of skills but does not supply the required metadata (author, timestamp, and jump URL) for the extracted messages as specified by the functionality. The user asked for all skills "mentioned," implying extraction from actual messages rather than a general summary, and expects message-level evidence. Additionally, there's no direct evidence that semantic/keyword search was performed on messages specifically by darkgago in #🛠ai-practical-applications over the past month. Without message-level results and metadata, the response is incomplete.
E       assert False
E        +  where False = <built-in method startswith of str object at 0x110008200>('PASS')
E        +    where <built-in method startswith of str object at 0x110008200> = 'FAIL\n\nExplanation: The response provides a summary of skills but does not supply the required metadata (author, timestamp, and jump URL) for the extracted messages as specified by the functionality. The user asked for all skills "mentioned," implying extraction from actual messages rather than a general summary, and expects message-level evidence. Additionally, there\'s no direct evidence that semantic/keyword search was performed on messages specifically by darkgago in #🛠ai-practical-applications over the past month. Without message-level results and metadata, the response is incomplete.'.startswith

tests/test_agent_integration.py:148: AssertionError
----------------------------- Captured stdout call -----------------------------


[1m> Entering new AgentExecutor chain...[0m
[32;1m[1;3m
Invoking: `validate_data_availability` with `{}`


[0m[38;5;200m[1;3m{'status': 'ok', 'message': 'Data available', 'count': 4492, 'channels': {'genai-use-case-roundtable': 8, 'showcase': 29, '❌💻non-coders-learning': 199, '❓buddy-support': 24, '❓q-and-a-questions': 25, '🌎-community': 97, '🌐official-site': 1, '🎓-classes': 8, '🎥meeting-recordings': 33, '🎯admin-onboarding': 9, '🎯onboarding': 5, '🏘admin-general-chat': 239, '🏘general-chat': 651, '🏛netarch-general': 379, '🏛🗣netarch-content': 15, '🏛🤖netarch-agents': 68, '👋admin-introductions': 2, '👋introductions': 140, '👾discord-managers': 174, '💠buddy-group1': 59, '💠buddy-group10': 50, '💠buddy-group11': 53, '💠buddy-group12': 19, '💠buddy-group2': 119, '💠buddy-group3': 63, '💠buddy-group5': 95, '💠buddy-group6': 41, '💠buddy-group7': 62, '💠buddy-group8': 92, '💠buddy-group9': 110, '💬convo-leaders-prompts': 6, '💬live-chat': 16, '💬questions-help': 5, '💵financial-services': 22, '💻learning-without-coding-skills': 20, '💼career-opportunities': 59, '📄papers-and-publications': 27, '📖resources-library': 29, '📚ai-philosophy-ethics': 151, '📝q-and-a-polls': 13, '📝welcome-rules': 6, '📣general-announcements': 50, '📥feedback-submissions': 27, '📥member-of-the-week-submissions': 14, '📥socialmedia-submissions': 2, '📩midweek-request': 1, '📸-social-media': 4, '📸content-creation-chat': 3, '🔐cyber‑report‑desk': 6, '🗂sgu-managers-resources': 23, '🗃gen-ai-use-cases': 37, '🗞genai-news': 30, '🗣convo-leaders-chat': 131, '🙋member-of-the-week-poll': 36, '\U0001f6dddiscord-pg': 142, '\U0001f6dddiscord-pg-sgu': 14, '🛠-workshops': 4, '🛠ai-practical-applications': 77, '🛠it-support': 62, '🤖agent-dev': 2, '🤖workshops': 56, '🤝find-a-buddy': 104, '🦾sgu-managers': 277, '🧠feedback-workshop': 80, '🧢buddy-group4': 87}, 'date_range': {'oldest': '2025-03-27T21:03:27.683000', 'newest': '2025-05-16T16:33:38.673000'}}[0m[32;1m[1;3m
Invoking: `search_messages` with `{'channel_name': '🛠ai-practical-applications', 'author_name': 'darkgago', 'k': 20}`


[0m[36;1m[1;3m[{'author': {'id': '758206516753858561', 'username': 'darkgago', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 4, 28, 17, 33, 9, 461000), 'content': '', 'jump_url': 'https://discord.com/channels/1353058864810950737/1354190157049364501/1366467289121292379', 'channel_name': '🛠ai-practical-applications', 'guild_id': 1353058864810950737, 'channel_id': 1354190157049364501, 'message_id': 1366467289121292379}, {'author': {'id': '758206516753858561', 'username': 'darkgago', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 4, 28, 17, 33, 10, 33000), 'content': 'This is Amazing !', 'jump_url': 'https://discord.com/channels/1353058864810950737/1354190157049364501/1366467291520176250', 'channel_name': '🛠ai-practical-applications', 'guild_id': 1353058864810950737, 'channel_id': 1354190157049364501, 'message_id': 1366467291520176250}, {'author': {'id': '758206516753858561', 'username': 'darkgago', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 4, 22, 21, 49, 3, 792000), 'content': '**Headline:** US Law Firms Prioritize Jobs and Safety in AI Rollout  \n**Source / Date:** Financial Times, January 2025  \n**Link:** https://www.ft.com/content/afb750bf-ab26-42fd-a802-b788145b8449\n**Quick\u202fSummary:** Leading US law firms, including Crowell & Moring and White & Case, are integrating generative AI tools to enhance efficiency and reduce routine workloads. These tools assist in tasks such as summarizing documents and drafting legal content, allowing lawyers to focus on more complex work. Firms are implementing training programs and secure AI deployments to address concerns about data privacy and ensure responsible usage.  \n**Takeaway:** Generative AI is streamlining legal workflows, enabling firms to deliver cost-effective services while maintaining a focus on job preservation and ethical considerations.', 'jump_url': 'https://discord.com/channels/1353058864810950737/1354190157049364501/1364357362659496006', 'channel_name': '🛠ai-practical-applications', 'guild_id': 1353058864810950737, 'channel_id': 1354190157049364501, 'message_id': 1364357362659496006}, {'author': {'id': '758206516753858561', 'username': 'darkgago', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 4, 25, 16, 24, 10, 381000), 'content': "Morning ! for those in Advertising ! \n\n**Headline:** Microsoft made an ad with generative AI and nobody noticed  \n**Source / Date:** The Verge, April 25, 2025  \n**Link:** https://www.theverge.com/news/656104/microsoft-surface-ad-generative-ai-copilot-intel](https://www.theverge.com/news/656104/microsoft-surface-ad-generative-ai-copilot-intel\n**Quick\u202fSummary:** Microsoft utilized generative AI tools to create segments of a one-minute advertisement for its Surface Pro and Surface Laptop, which aired on YouTube starting January 30, 2025. The AI-generated content, including visuals and script elements, was seamlessly integrated with real footage, going unnoticed by viewers for nearly three months. This approach led to a 90% reduction in production time and cost, demonstrating AI's potential to streamline creative processes without compromising quality.  \n**Takeaway:** Generative AI is revolutionizing advertising by enabling efficient, high-quality content creation that blends indistinguishably with human-made media.", 'jump_url': 'https://discord.com/channels/1353058864810950737/1354190157049364501/1365362764964565042', 'channel_name': '🛠ai-practical-applications', 'guild_id': 1353058864810950737, 'channel_id': 1354190157049364501, 'message_id': 1365362764964565042}, {'author': {'id': '758206516753858561', 'username': 'darkgago', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 4, 21, 18, 54, 17, 225000), 'content': 'Hi everybody !  I found this real world case ! a good example of how AI can improve and make our jobs better and safer !\n\nHeadline: A Boston-based construction firm is leveraging AI to keep roughly 30,000 workers safe  \nSource / Date: Business Insider, April 15, 2025  \nLink: https://www.businessinsider.com/ai-for-worker-site-safety-in-construction-2025-4  \nQuick\u202fSummary: Shawmut Design and Construction uses AI to analyze data from job sites, weather conditions, and workforce changes to predict and prevent safety incidents. By integrating GPS-enabled tracking and daily risk assessments, they proactively reduce hazards across 150+ worksites. The company ensures ethical use by anonymizing data and plans to expand with real-time AI alerts tailored to local regulations.  \nTakeaway: AI is keeping construction workers safer—predictive tech is becoming the new hard hat.', 'jump_url': 'https://discord.com/channels/1353058864810950737/1354190157049364501/1363950990944108587', 'channel_name': '🛠ai-practical-applications', 'guild_id': 1353058864810950737, 'channel_id': 1354190157049364501, 'message_id': 1363950990944108587}][0m[32;1m[1;3mHere are the skills mentioned by darkgago in #🛠ai-practical-applications over the past month, based on their shared content and summaries:

1. Generative AI usage:
   - Summarizing documents
   - Drafting legal content
   - Creating advertising content (visuals and scripts)
   - Integrating AI-generated content with real footage

2. AI in workflow optimization:
   - Enhancing efficiency and reducing routine workloads
   - Streamlining creative and legal processes
   - Reducing production time and cost

3. AI for safety and risk management:
   - Analyzing data from job sites, weather, and workforce changes
   - Predicting and preventing safety incidents
   - Integrating GPS-enabled tracking and daily risk assessments
   - Implementing real-time AI alerts

4. Responsible AI deployment:
   - Addressing data privacy concerns
   - Ensuring ethical and secure AI usage
   - Anonymizing data for privacy

5. Training and upskilling:
   - Implementing training programs for AI adoption

These skills reflect darkgago's focus on practical AI applications in legal, advertising, and construction industries, emphasizing efficiency, safety, and ethical considerations. If you need direct quotes or more detailed breakdowns, let me know![0m

[1m> Finished chain.[0m
_ test_balanced_suite[Find the 3 most semantically similar messages to \u2018invite link restrictions\u2019 across all channels.-expected_behavior10] _

query = 'Find the 3 most semantically similar messages to ‘invite link restrictions’ across all channels.'
expected_behavior = {'functionality': 'search'}

    @pytest.mark.parametrize("query,expected_behavior", [
        # 1. Validate data availability
        ("What data is currently cached?", {"functionality": "data_availability"}),
        # 2. Basic keyword search
        ("Find messages containing ‘AI ethics’ in #📚ai-philosophy-ethics.", {"functionality": "search"}),
        # 3. Top-K override
        ("Show me the top 4 messages mentioning ‘welcome’ in #📝welcome-rules.", {"functionality": "search"}),
        # 4. Hybrid keyword + semantic
        ("Search for ‘use cases’ with keyword ‘roundtable’ in #genai-use-case-roundtable, returning the top 3 results.", {"functionality": "search"}),
        # 5. Author filter
        ("List all messages by cristian_72225 in #👋introductions.", {"functionality": "search"}),
        # 6. Channel-ID filter with ISO times
        ("Retrieve messages in channel ID 1365732945859444767 (📢announcements-admin) between 2025-04-20T00:00:00Z and 2025-04-25T23:59:59Z, top 5.", {"functionality": "search"}),
        # 7. Plain-text summarization (relative)
        ("Summarize messages from last weekend in #🏘general-chat.", {"functionality": "summarize"}),
        # 8. JSON summarization (absolute)
        ("Summarize messages from 2025-04-01 to 2025-04-30 in #🛠ai-practical-applications as JSON.", {"functionality": "summarize"}),
        # 9. Plain-text summarization (absolute)
        ("What were the key discussion points in #🤖intro-to-agentic-ai between 2025-04-22 and 2025-04-24?", {"functionality": "summarize"}),
        # 10. Skill-term extraction
        ("Extract all skills mentioned by darkgago in #🛠ai-practical-applications over the past month.", {"functionality": "search"}),
        # 11. Semantic-only reranking
        ("Find the 3 most semantically similar messages to ‘invite link restrictions’ across all channels.", {"functionality": "search"}),
        # 12. Empty-query guard
        ("", {"functionality": "error_handling", "raises": ValueError, "msg": "Query cannot be empty"}),
        # 13. Invalid timeframe
        ("Search messages from 2025-04-26 to 2025-04-23 in #🏘general-chat.", {"functionality": "error_handling", "msg": "End time must be after start time"}),
        # 14. Unknown channel
        ("Search for ‘bug’ in #nonexistent-channel.", {"functionality": "error_handling", "msg": "Unknown channel"}),
        # 15. Fallback/clarification prompt
        ("Tell me something interesting.", {"functionality": "error_handling", "msg": "Which channel, timeframe, or keyword"}),
        # 16. Combined multi-criteria
        ("In #📥feedback-submissions, find the top 2 messages about ‘suggestions’ by laura.neder between last Friday and yesterday, then summarize them.", {"functionality": "summarize"}),
        # 17. Implicit channel name parsing
        ("What was discussed about ‘help’ on 2025-04-18 in the discord-help channel?", {"functionality": "search"}),
        # 18. JSON summary key validation
        ("Summarize this week in #❓q-and-a-questions as JSON and ensure the output has both `summary` and `note` fields.", {"functionality": "summarize", "json_keys": ["summary", "note"]}),
        # 19. Jump-URL accuracy
        ("Give me the 5 most recent messages in #🏘general-chat with jump URLs.", {"functionality": "search"}),
        # 20. Empty-channel search
        ("Retrieve messages in channel ID 1364250555467300976 (📩midweek-request) between 2025-04-20 and 2025-04-25.", {"functionality": "search", "expect_empty": True}),
    ])
    def test_balanced_suite(query, expected_behavior):
        if expected_behavior.get("raises"):
            with pytest.raises(expected_behavior["raises"]):
                get_agent_answer(query)
            return
        result = get_agent_answer(query)
        # Error handling/clarification/fallback
        if expected_behavior["functionality"] == "error_handling":
            if "msg" in expected_behavior:
                assert expected_behavior["msg"].lower() in str(result).lower()
            else:
                ai_eval = ai_validate_response(query, result, functionality="error_handling")
                assert ai_eval.startswith("PASS"), f"AI validation failed: {ai_eval}"
            return
        # JSON summary key validation
        if expected_behavior.get("json_keys"):
            assert isinstance(result, dict), "Expected JSON output"
            for key in expected_behavior["json_keys"]:
                assert key in result, f"Missing key '{key}' in JSON summary"
        # Expect empty result
        if expected_behavior.get("expect_empty"):
            assert result == [] or result == {} or not result, "Expected empty result for empty channel search"
            return
        # Standard AI validation
        ai_eval = ai_validate_response(query, result, functionality=expected_behavior["functionality"])
>       assert ai_eval.startswith("PASS"), f"AI validation failed: {ai_eval}"
E       AssertionError: AI validation failed: FAIL
E         
E         Explanation: The messages returned by the agent are not semantically similar to the query "invite link restrictions." None of the messages discuss invite links, their usage, or any restrictions/policies related to them. The first message discusses channel visibility, the second discusses joining a buddy group and slow mode, and the third is about a class and related video materials. The agent's response fails to correctly retrieve relevant or semantically similar messages as requested in the user's query.
E       assert False
E        +  where False = <built-in method startswith of str object at 0x106b07d00>('PASS')
E        +    where <built-in method startswith of str object at 0x106b07d00> = 'FAIL\n\nExplanation: The messages returned by the agent are not semantically similar to the query "invite link restrictions." None of the messages discuss invite links, their usage, or any restrictions/policies related to them. The first message discusses channel visibility, the second discusses joining a buddy group and slow mode, and the third is about a class and related video materials. The agent\'s response fails to correctly retrieve relevant or semantically similar messages as requested in the user\'s query.'.startswith

tests/test_agent_integration.py:148: AssertionError
----------------------------- Captured stdout call -----------------------------


[1m> Entering new AgentExecutor chain...[0m
[32;1m[1;3m
Invoking: `search_messages` with `{'query': 'invite link restrictions', 'k': 3}`


[0m[36;1m[1;3m[{'author': {'id': '1352785241252565174', 'username': 'oscarsan.chez', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 4, 29, 21, 0, 8, 979000), 'content': '@everyone \n\n🗂️ Buddy-Group Channel Visibility — Quick FYI\n\nHere’s why the channel list looks different depending on your role:\n\n🔧 Discord Managers\n• See every buddy-group text + voice channel — they need full access to wire up Sesh, bots, and other integrations.\n\n🗣️ Conversational Leaders\n• See only the single buddy group they facilitate — keeps their focus on guiding discussion and weekly check-ins.\n\n👥 General Members\n• Will see just their own buddy group after they sign up in <#1353443209166065664>', 'jump_url': 'https://discord.com/channels/1353058864810950737/1365732945859444767/1366881768220790815', 'channel_name': '📣general-announcements', 'guild_id': 1353058864810950737, 'channel_id': 1365732945859444767, 'message_id': 1366881768220790815}, {'author': {'id': '1352785241252565174', 'username': 'oscarsan.chez', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 4, 22, 2, 2, 32, 659000), 'content': 'Step 4:\n\n🤝 Join a {Community-Cord} Buddy Group:\n\nNavigate to the <#1363965944086532226>  channel \n\n[IN THE CONVERSATIONAL LEADER BUDDY CORNER !NOT! THE GENERAL MEMBER BUDDY CORNER] \n\nand carefully provide the following information for accurate buddy pairing:\n\n🌎 Time Zone: (e.g., PST, EST, CET)\n\n🎯 Your Main Goal for the Server: (Networking, Learning, Collaboration, etc.)\n\n✏️ Preferred Display Name: (How you’d like others to address you)\n\nIMPORTANT: Slow mode ⏳ is enabled (30-minute cooldown between messages) to ensure clarity and accuracy. Please double-check your message before sending!\n\nFor every new cohort, we collect this information during the first two days after general admissions. After this period, we utilize AI to pair you into optimal buddy groups for effective collaboration and community engagement!\n\nANY QUESTIONS regarding the buddy group process head to <#1363966092384669807>  channel !', 'jump_url': 'https://discord.com/channels/1353058864810950737/1363537366110703937/1364058765405716602', 'channel_name': '🎯admin-onboarding', 'guild_id': 1353058864810950737, 'channel_id': 1363537366110703937, 'message_id': 1364058765405716602}, {'author': {'id': '1352785241252565174', 'username': 'oscarsan.chez', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 5, 8, 18, 57, 44, 644000), 'content': 'https://fathom.video/share/XQjrZyyTCjw5NF5NKs88FP7ppadsXuoh\n\n@everyone 🎥 Here is the link to the video explaining the new Agent Development Class {Discord Managers 2.0}. For anyone interested, contact <@1143203059820933251> for more details. We assume a 0 coding background for anyone entering the course, and the class is officiated by both Dr.Sanchez and onboarded CS professionals {we are also onboarding MIT alumni recommended by Dr.Sanchez}! \n\n📊 Also attached are the slides from today explaining the program! This learning experience is only open to admins at the moment, so refrain from notifying general members!', 'jump_url': 'https://discord.com/channels/1353058864810950737/1363537366110703937/1370112454637523107', 'channel_name': '🎯admin-onboarding', 'guild_id': 1353058864810950737, 'channel_id': 1363537366110703937, 'message_id': 1370112454637523107}][0m[32;1m[1;3mHere are the 3 most semantically similar messages to "invite link restrictions" across all channels:

1. In 📣general-announcements:
@everyone

🗂️ Buddy-Group Channel Visibility — Quick FYI

Here’s why the channel list looks different depending on your role:

🔧 Discord Managers
• See every buddy-group text + voice channel — they need full access to wire up Sesh, bots, and other integrations.

🗣️ Conversational Leaders
• See only the single buddy group they facilitate — keeps their focus on guiding discussion and weekly check-ins.

👥 General Members
• Will see just their own buddy group after they sign up in <#1353443209166065664>
View message

2. In 🎯admin-onboarding:
Step 4:

🤝 Join a {Community-Cord} Buddy Group:

Navigate to the <#1363965944086532226> channel

[IN THE CONVERSATIONAL LEADER BUDDY CORNER !NOT! THE GENERAL MEMBER BUDDY CORNER]

and carefully provide the following information for accurate buddy pairing:

🌎 Time Zone: (e.g., PST, EST, CET)

🎯 Your Main Goal for the Server: (Networking, Learning, Collaboration, etc.)

✏️ Preferred Display Name: (How you’d like others to address you)

IMPORTANT: Slow mode ⏳ is enabled (30-minute cooldown between messages) to ensure clarity and accuracy. Please double-check your message before sending!

For every new cohort, we collect this information during the first two days after general admissions. After this period, we utilize AI to pair you into optimal buddy groups for effective collaboration and community engagement!

ANY QUESTIONS regarding the buddy group process head to <#1363966092384669807> channel!
View message

3. In 🎯admin-onboarding:
https://fathom.video/share/XQjrZyyTCjw5NF5NKs88FP7ppadsXuoh

@everyone 🎥 Here is the link to the video explaining the new Agent Development Class {Discord Managers 2.0}. For anyone interested, contact <@1143203059820933251> for more details. We assume a 0 coding background for anyone entering the course, and the class is officiated by both Dr.Sanchez and onboarded CS professionals {we are also onboarding MIT alumni recommended by Dr.Sanchez}!

📊 Also attached are the slides from today explaining the program! This learning experience is only open to admins at the moment, so refrain from notifying general members!
View message

If you need more details or want to refine the search, let me know![0m

[1m> Finished chain.[0m
_ test_balanced_suite[Search messages from 2025-04-26 to 2025-04-23 in #\U0001f3d8general-chat.-expected_behavior12] _

query = 'Search messages from 2025-04-26 to 2025-04-23 in #🏘general-chat.'
expected_behavior = {'functionality': 'error_handling', 'msg': 'End time must be after start time'}

    @pytest.mark.parametrize("query,expected_behavior", [
        # 1. Validate data availability
        ("What data is currently cached?", {"functionality": "data_availability"}),
        # 2. Basic keyword search
        ("Find messages containing ‘AI ethics’ in #📚ai-philosophy-ethics.", {"functionality": "search"}),
        # 3. Top-K override
        ("Show me the top 4 messages mentioning ‘welcome’ in #📝welcome-rules.", {"functionality": "search"}),
        # 4. Hybrid keyword + semantic
        ("Search for ‘use cases’ with keyword ‘roundtable’ in #genai-use-case-roundtable, returning the top 3 results.", {"functionality": "search"}),
        # 5. Author filter
        ("List all messages by cristian_72225 in #👋introductions.", {"functionality": "search"}),
        # 6. Channel-ID filter with ISO times
        ("Retrieve messages in channel ID 1365732945859444767 (📢announcements-admin) between 2025-04-20T00:00:00Z and 2025-04-25T23:59:59Z, top 5.", {"functionality": "search"}),
        # 7. Plain-text summarization (relative)
        ("Summarize messages from last weekend in #🏘general-chat.", {"functionality": "summarize"}),
        # 8. JSON summarization (absolute)
        ("Summarize messages from 2025-04-01 to 2025-04-30 in #🛠ai-practical-applications as JSON.", {"functionality": "summarize"}),
        # 9. Plain-text summarization (absolute)
        ("What were the key discussion points in #🤖intro-to-agentic-ai between 2025-04-22 and 2025-04-24?", {"functionality": "summarize"}),
        # 10. Skill-term extraction
        ("Extract all skills mentioned by darkgago in #🛠ai-practical-applications over the past month.", {"functionality": "search"}),
        # 11. Semantic-only reranking
        ("Find the 3 most semantically similar messages to ‘invite link restrictions’ across all channels.", {"functionality": "search"}),
        # 12. Empty-query guard
        ("", {"functionality": "error_handling", "raises": ValueError, "msg": "Query cannot be empty"}),
        # 13. Invalid timeframe
        ("Search messages from 2025-04-26 to 2025-04-23 in #🏘general-chat.", {"functionality": "error_handling", "msg": "End time must be after start time"}),
        # 14. Unknown channel
        ("Search for ‘bug’ in #nonexistent-channel.", {"functionality": "error_handling", "msg": "Unknown channel"}),
        # 15. Fallback/clarification prompt
        ("Tell me something interesting.", {"functionality": "error_handling", "msg": "Which channel, timeframe, or keyword"}),
        # 16. Combined multi-criteria
        ("In #📥feedback-submissions, find the top 2 messages about ‘suggestions’ by laura.neder between last Friday and yesterday, then summarize them.", {"functionality": "summarize"}),
        # 17. Implicit channel name parsing
        ("What was discussed about ‘help’ on 2025-04-18 in the discord-help channel?", {"functionality": "search"}),
        # 18. JSON summary key validation
        ("Summarize this week in #❓q-and-a-questions as JSON and ensure the output has both `summary` and `note` fields.", {"functionality": "summarize", "json_keys": ["summary", "note"]}),
        # 19. Jump-URL accuracy
        ("Give me the 5 most recent messages in #🏘general-chat with jump URLs.", {"functionality": "search"}),
        # 20. Empty-channel search
        ("Retrieve messages in channel ID 1364250555467300976 (📩midweek-request) between 2025-04-20 and 2025-04-25.", {"functionality": "search", "expect_empty": True}),
    ])
    def test_balanced_suite(query, expected_behavior):
        if expected_behavior.get("raises"):
            with pytest.raises(expected_behavior["raises"]):
                get_agent_answer(query)
            return
        result = get_agent_answer(query)
        # Error handling/clarification/fallback
        if expected_behavior["functionality"] == "error_handling":
            if "msg" in expected_behavior:
>               assert expected_behavior["msg"].lower() in str(result).lower()
E               AssertionError: assert 'end time must be after start time' in 'it looks like the date range you provided is reversed (from 2025-04-26 to 2025-04-23). could you please clarify the correct date range? should i search from 2025-04-23 to 2025-04-26, or did you mean different dates? let me know so i can proceed with your request!'
E                +  where 'end time must be after start time' = <built-in method lower of str object at 0x102be5990>()
E                +    where <built-in method lower of str object at 0x102be5990> = 'End time must be after start time'.lower
E                +  and   'it looks like the date range you provided is reversed (from 2025-04-26 to 2025-04-23). could you please clarify the correct date range? should i search from 2025-04-23 to 2025-04-26, or did you mean different dates? let me know so i can proceed with your request!' = <built-in method lower of str object at 0x111d548f0>()
E                +    where <built-in method lower of str object at 0x111d548f0> = 'It looks like the date range you provided is reversed (from 2025-04-26 to 2025-04-23). Could you please clarify the correct date range? Should I search from 2025-04-23 to 2025-04-26, or did you mean different dates? Let me know so I can proceed with your request!'.lower
E                +      where 'It looks like the date range you provided is reversed (from 2025-04-26 to 2025-04-23). Could you please clarify the correct date range? Should I search from 2025-04-23 to 2025-04-26, or did you mean different dates? Let me know so I can proceed with your request!' = str('It looks like the date range you provided is reversed (from 2025-04-26 to 2025-04-23). Could you please clarify the correct date range? Should I search from 2025-04-23 to 2025-04-26, or did you mean different dates? Let me know so I can proceed with your request!')

tests/test_agent_integration.py:132: AssertionError
----------------------------- Captured stdout call -----------------------------


[1m> Entering new AgentExecutor chain...[0m
[32;1m[1;3mIt looks like the date range you provided is reversed (from 2025-04-26 to 2025-04-23). Could you please clarify the correct date range? Should I search from 2025-04-23 to 2025-04-26, or did you mean different dates? Let me know so I can proceed with your request![0m

[1m> Finished chain.[0m
_ test_balanced_suite[Search for \u2018bug\u2019 in #nonexistent-channel.-expected_behavior13] _

query = 'Search for ‘bug’ in #nonexistent-channel.'
expected_behavior = {'functionality': 'error_handling', 'msg': 'Unknown channel'}

    @pytest.mark.parametrize("query,expected_behavior", [
        # 1. Validate data availability
        ("What data is currently cached?", {"functionality": "data_availability"}),
        # 2. Basic keyword search
        ("Find messages containing ‘AI ethics’ in #📚ai-philosophy-ethics.", {"functionality": "search"}),
        # 3. Top-K override
        ("Show me the top 4 messages mentioning ‘welcome’ in #📝welcome-rules.", {"functionality": "search"}),
        # 4. Hybrid keyword + semantic
        ("Search for ‘use cases’ with keyword ‘roundtable’ in #genai-use-case-roundtable, returning the top 3 results.", {"functionality": "search"}),
        # 5. Author filter
        ("List all messages by cristian_72225 in #👋introductions.", {"functionality": "search"}),
        # 6. Channel-ID filter with ISO times
        ("Retrieve messages in channel ID 1365732945859444767 (📢announcements-admin) between 2025-04-20T00:00:00Z and 2025-04-25T23:59:59Z, top 5.", {"functionality": "search"}),
        # 7. Plain-text summarization (relative)
        ("Summarize messages from last weekend in #🏘general-chat.", {"functionality": "summarize"}),
        # 8. JSON summarization (absolute)
        ("Summarize messages from 2025-04-01 to 2025-04-30 in #🛠ai-practical-applications as JSON.", {"functionality": "summarize"}),
        # 9. Plain-text summarization (absolute)
        ("What were the key discussion points in #🤖intro-to-agentic-ai between 2025-04-22 and 2025-04-24?", {"functionality": "summarize"}),
        # 10. Skill-term extraction
        ("Extract all skills mentioned by darkgago in #🛠ai-practical-applications over the past month.", {"functionality": "search"}),
        # 11. Semantic-only reranking
        ("Find the 3 most semantically similar messages to ‘invite link restrictions’ across all channels.", {"functionality": "search"}),
        # 12. Empty-query guard
        ("", {"functionality": "error_handling", "raises": ValueError, "msg": "Query cannot be empty"}),
        # 13. Invalid timeframe
        ("Search messages from 2025-04-26 to 2025-04-23 in #🏘general-chat.", {"functionality": "error_handling", "msg": "End time must be after start time"}),
        # 14. Unknown channel
        ("Search for ‘bug’ in #nonexistent-channel.", {"functionality": "error_handling", "msg": "Unknown channel"}),
        # 15. Fallback/clarification prompt
        ("Tell me something interesting.", {"functionality": "error_handling", "msg": "Which channel, timeframe, or keyword"}),
        # 16. Combined multi-criteria
        ("In #📥feedback-submissions, find the top 2 messages about ‘suggestions’ by laura.neder between last Friday and yesterday, then summarize them.", {"functionality": "summarize"}),
        # 17. Implicit channel name parsing
        ("What was discussed about ‘help’ on 2025-04-18 in the discord-help channel?", {"functionality": "search"}),
        # 18. JSON summary key validation
        ("Summarize this week in #❓q-and-a-questions as JSON and ensure the output has both `summary` and `note` fields.", {"functionality": "summarize", "json_keys": ["summary", "note"]}),
        # 19. Jump-URL accuracy
        ("Give me the 5 most recent messages in #🏘general-chat with jump URLs.", {"functionality": "search"}),
        # 20. Empty-channel search
        ("Retrieve messages in channel ID 1364250555467300976 (📩midweek-request) between 2025-04-20 and 2025-04-25.", {"functionality": "search", "expect_empty": True}),
    ])
    def test_balanced_suite(query, expected_behavior):
        if expected_behavior.get("raises"):
            with pytest.raises(expected_behavior["raises"]):
                get_agent_answer(query)
            return
        result = get_agent_answer(query)
        # Error handling/clarification/fallback
        if expected_behavior["functionality"] == "error_handling":
            if "msg" in expected_behavior:
>               assert expected_behavior["msg"].lower() in str(result).lower()
E               AssertionError: assert 'unknown channel' in 'it appears that there is no channel named #nonexistent-channel. please check the channel name and try again, or let me know if you need help searching in a different channel.'
E                +  where 'unknown channel' = <built-in method lower of str object at 0x102becfb0>()
E                +    where <built-in method lower of str object at 0x102becfb0> = 'Unknown channel'.lower
E                +  and   'it appears that there is no channel named #nonexistent-channel. please check the channel name and try again, or let me know if you need help searching in a different channel.' = <built-in method lower of str object at 0x1116f9730>()
E                +    where <built-in method lower of str object at 0x1116f9730> = 'It appears that there is no channel named #nonexistent-channel. Please check the channel name and try again, or let me know if you need help searching in a different channel.'.lower
E                +      where 'It appears that there is no channel named #nonexistent-channel. Please check the channel name and try again, or let me know if you need help searching in a different channel.' = str('It appears that there is no channel named #nonexistent-channel. Please check the channel name and try again, or let me know if you need help searching in a different channel.')

tests/test_agent_integration.py:132: AssertionError
----------------------------- Captured stdout call -----------------------------


[1m> Entering new AgentExecutor chain...[0m
[32;1m[1;3m
Invoking: `search_messages` with `{'query': 'bug', 'channel_name': 'nonexistent-channel'}`


[0m[36;1m[1;3m[{'note': "Channel 'nonexistent-channel' not found.", 'messages': []}][0m[32;1m[1;3mIt appears that there is no channel named #nonexistent-channel. Please check the channel name and try again, or let me know if you need help searching in a different channel.[0m

[1m> Finished chain.[0m
___ test_balanced_suite[Tell me something interesting.-expected_behavior14] ____

query = 'Tell me something interesting.'
expected_behavior = {'functionality': 'error_handling', 'msg': 'Which channel, timeframe, or keyword'}

    @pytest.mark.parametrize("query,expected_behavior", [
        # 1. Validate data availability
        ("What data is currently cached?", {"functionality": "data_availability"}),
        # 2. Basic keyword search
        ("Find messages containing ‘AI ethics’ in #📚ai-philosophy-ethics.", {"functionality": "search"}),
        # 3. Top-K override
        ("Show me the top 4 messages mentioning ‘welcome’ in #📝welcome-rules.", {"functionality": "search"}),
        # 4. Hybrid keyword + semantic
        ("Search for ‘use cases’ with keyword ‘roundtable’ in #genai-use-case-roundtable, returning the top 3 results.", {"functionality": "search"}),
        # 5. Author filter
        ("List all messages by cristian_72225 in #👋introductions.", {"functionality": "search"}),
        # 6. Channel-ID filter with ISO times
        ("Retrieve messages in channel ID 1365732945859444767 (📢announcements-admin) between 2025-04-20T00:00:00Z and 2025-04-25T23:59:59Z, top 5.", {"functionality": "search"}),
        # 7. Plain-text summarization (relative)
        ("Summarize messages from last weekend in #🏘general-chat.", {"functionality": "summarize"}),
        # 8. JSON summarization (absolute)
        ("Summarize messages from 2025-04-01 to 2025-04-30 in #🛠ai-practical-applications as JSON.", {"functionality": "summarize"}),
        # 9. Plain-text summarization (absolute)
        ("What were the key discussion points in #🤖intro-to-agentic-ai between 2025-04-22 and 2025-04-24?", {"functionality": "summarize"}),
        # 10. Skill-term extraction
        ("Extract all skills mentioned by darkgago in #🛠ai-practical-applications over the past month.", {"functionality": "search"}),
        # 11. Semantic-only reranking
        ("Find the 3 most semantically similar messages to ‘invite link restrictions’ across all channels.", {"functionality": "search"}),
        # 12. Empty-query guard
        ("", {"functionality": "error_handling", "raises": ValueError, "msg": "Query cannot be empty"}),
        # 13. Invalid timeframe
        ("Search messages from 2025-04-26 to 2025-04-23 in #🏘general-chat.", {"functionality": "error_handling", "msg": "End time must be after start time"}),
        # 14. Unknown channel
        ("Search for ‘bug’ in #nonexistent-channel.", {"functionality": "error_handling", "msg": "Unknown channel"}),
        # 15. Fallback/clarification prompt
        ("Tell me something interesting.", {"functionality": "error_handling", "msg": "Which channel, timeframe, or keyword"}),
        # 16. Combined multi-criteria
        ("In #📥feedback-submissions, find the top 2 messages about ‘suggestions’ by laura.neder between last Friday and yesterday, then summarize them.", {"functionality": "summarize"}),
        # 17. Implicit channel name parsing
        ("What was discussed about ‘help’ on 2025-04-18 in the discord-help channel?", {"functionality": "search"}),
        # 18. JSON summary key validation
        ("Summarize this week in #❓q-and-a-questions as JSON and ensure the output has both `summary` and `note` fields.", {"functionality": "summarize", "json_keys": ["summary", "note"]}),
        # 19. Jump-URL accuracy
        ("Give me the 5 most recent messages in #🏘general-chat with jump URLs.", {"functionality": "search"}),
        # 20. Empty-channel search
        ("Retrieve messages in channel ID 1364250555467300976 (📩midweek-request) between 2025-04-20 and 2025-04-25.", {"functionality": "search", "expect_empty": True}),
    ])
    def test_balanced_suite(query, expected_behavior):
        if expected_behavior.get("raises"):
            with pytest.raises(expected_behavior["raises"]):
                get_agent_answer(query)
            return
        result = get_agent_answer(query)
        # Error handling/clarification/fallback
        if expected_behavior["functionality"] == "error_handling":
            if "msg" in expected_behavior:
>               assert expected_behavior["msg"].lower() in str(result).lower()
E               AssertionError: assert 'which channel, timeframe, or keyword' in 'sure! did you know that octopuses have three hearts? two pump blood to the gills, while the third pumps it to the rest of the body. even more fascinating, their blood is blue because it uses copper-based hemocyanin to transport oxygen, which is more efficient in cold, low-oxygen environments where many octopuses live. nature is full of surprises! would you like to hear more fun facts?'
E                +  where 'which channel, timeframe, or keyword' = <built-in method lower of str object at 0x102be5c30>()
E                +    where <built-in method lower of str object at 0x102be5c30> = 'Which channel, timeframe, or keyword'.lower
E                +  and   'sure! did you know that octopuses have three hearts? two pump blood to the gills, while the third pumps it to the rest of the body. even more fascinating, their blood is blue because it uses copper-based hemocyanin to transport oxygen, which is more efficient in cold, low-oxygen environments where many octopuses live. nature is full of surprises! would you like to hear more fun facts?' = <built-in method lower of str object at 0x1116608f0>()
E                +    where <built-in method lower of str object at 0x1116608f0> = 'Sure! Did you know that octopuses have three hearts? Two pump blood to the gills, while the third pumps it to the rest of the body. Even more fascinating, their blood is blue because it uses copper-based hemocyanin to transport oxygen, which is more efficient in cold, low-oxygen environments where many octopuses live. Nature is full of surprises! Would you like to hear more fun facts?'.lower
E                +      where 'Sure! Did you know that octopuses have three hearts? Two pump blood to the gills, while the third pumps it to the rest of the body. Even more fascinating, their blood is blue because it uses copper-based hemocyanin to transport oxygen, which is more efficient in cold, low-oxygen environments where many octopuses live. Nature is full of surprises! Would you like to hear more fun facts?' = str('Sure! Did you know that octopuses have three hearts? Two pump blood to the gills, while the third pumps it to the rest of the body. Even more fascinating, their blood is blue because it uses copper-based hemocyanin to transport oxygen, which is more efficient in cold, low-oxygen environments where many octopuses live. Nature is full of surprises! Would you like to hear more fun facts?')

tests/test_agent_integration.py:132: AssertionError
----------------------------- Captured stdout call -----------------------------


[1m> Entering new AgentExecutor chain...[0m
[32;1m[1;3mSure! Did you know that octopuses have three hearts? Two pump blood to the gills, while the third pumps it to the rest of the body. Even more fascinating, their blood is blue because it uses copper-based hemocyanin to transport oxygen, which is more efficient in cold, low-oxygen environments where many octopuses live. Nature is full of surprises! Would you like to hear more fun facts?[0m

[1m> Finished chain.[0m
_ test_balanced_suite[What was discussed about \u2018help\u2019 on 2025-04-18 in the discord-help channel?-expected_behavior16] _

query = 'What was discussed about ‘help’ on 2025-04-18 in the discord-help channel?'

    def get_agent_answer(query: str) -> Any:
        """
        Send the user's raw query to the function-calling agent.
    
        Args:
            query: The user's question or request
    
        Returns:
            The agent's response
    
        Raises:
            ValueError: If the query is empty
            Exception: For other errors during agent execution
        """
        if not query.strip():
            raise ValueError("Query cannot be empty")
    
        try:
>           return agent.run(query)

core/agent.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.9/site-packages/langchain_core/_api/deprecation.py:191: in warning_emitting_wrapper
    return wrapped(*args, **kwargs)
venv/lib/python3.9/site-packages/langchain/chains/base.py:603: in run
    return self(args[0], callbacks=callbacks, tags=tags, metadata=metadata)[
venv/lib/python3.9/site-packages/langchain_core/_api/deprecation.py:191: in warning_emitting_wrapper
    return wrapped(*args, **kwargs)
venv/lib/python3.9/site-packages/langchain/chains/base.py:386: in __call__
    return self.invoke(
venv/lib/python3.9/site-packages/langchain/chains/base.py:167: in invoke
    raise e
venv/lib/python3.9/site-packages/langchain/chains/base.py:157: in invoke
    self._call(inputs, run_manager=run_manager)
venv/lib/python3.9/site-packages/langchain/agents/agent.py:1620: in _call
    next_step_output = self._take_next_step(
venv/lib/python3.9/site-packages/langchain/agents/agent.py:1326: in _take_next_step
    [
venv/lib/python3.9/site-packages/langchain/agents/agent.py:1326: in <listcomp>
    [
venv/lib/python3.9/site-packages/langchain/agents/agent.py:1411: in _iter_next_step
    yield self._perform_agent_action(
venv/lib/python3.9/site-packages/langchain/agents/agent.py:1433: in _perform_agent_action
    observation = tool.run(
venv/lib/python3.9/site-packages/langchain_core/tools/base.py:774: in run
    raise error_to_raise
venv/lib/python3.9/site-packages/langchain_core/tools/base.py:743: in run
    response = context.run(self._run, *tool_args, **tool_kwargs)
venv/lib/python3.9/site-packages/langchain_core/tools/structured.py:93: in _run
    return self.func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

start_iso = '2025-04-18T00:00:00+00:00', end_iso = '2025-04-18T23:59:59+00:00'
guild_id = None, channel_id = None, channel_name = 'discord-help'
as_json = False

    def summarize_messages(
        start_iso: str,
        end_iso: str,
        guild_id: Optional[int] = None,
        channel_id: Optional[int] = None,
        channel_name: Optional[str] = None,
        as_json: bool = False
    ) -> Union[str, Dict[str, Any]]:
        """
        Summarize all messages in [start_iso, end_iso].
        Returns either a text summary or JSON, per `as_json`.
        """
        # Debug logging
        print(f"\nDEBUG: Query Parameters:")
        print(f"Start ISO: {start_iso}")
        print(f"End ISO: {end_iso}")
        print(f"Guild ID: {guild_id}")
        print(f"Channel ID: {channel_id}")
        print(f"Channel Name: {channel_name}")
    
        # Validate IDs
        if guild_id is not None and not validate_guild_id(guild_id):
            raise ValueError(f"Invalid guild ID format: {guild_id}")
    
        if channel_id is not None and not validate_channel_id(channel_id):
            raise ValueError(f"Invalid channel ID format: {channel_id}")
    
        if channel_name is not None and not validate_channel_name(channel_name):
            raise ValueError(f"Invalid channel name format: {channel_name}")
    
        # validate time inputs
        try:
            # Handle 'Z' suffix for UTC
            if isinstance(start_iso, str) and start_iso.endswith('Z'):
                start_iso = start_iso.replace('Z', '+00:00')
            if isinstance(end_iso, str) and end_iso.endswith('Z'):
                end_iso = end_iso.replace('Z', '+00:00')
            start = datetime.fromisoformat(start_iso)
            end = datetime.fromisoformat(end_iso)
            if end < start:
                raise ValueError("End time must be after start time")
            # Debug logging
            print(f"\nDEBUG: Parsed Timestamps:")
            print(f"Start: {start}")
            print(f"End: {end}")
        except Exception as e:
            raise ValueError(f"Invalid ISO datetime: {e}")
    
        # resolve channel_name → channel_id
        if channel_name and not channel_id:
            channel_id = resolve_channel_name(channel_name, guild_id)
            if not channel_id:
>               raise ValueError(f"Unknown channel: {channel_name}")
E               ValueError: Unknown channel: discord-help

tools/tools.py:292: ValueError

During handling of the above exception, another exception occurred:

query = 'What was discussed about ‘help’ on 2025-04-18 in the discord-help channel?'
expected_behavior = {'functionality': 'search'}

    @pytest.mark.parametrize("query,expected_behavior", [
        # 1. Validate data availability
        ("What data is currently cached?", {"functionality": "data_availability"}),
        # 2. Basic keyword search
        ("Find messages containing ‘AI ethics’ in #📚ai-philosophy-ethics.", {"functionality": "search"}),
        # 3. Top-K override
        ("Show me the top 4 messages mentioning ‘welcome’ in #📝welcome-rules.", {"functionality": "search"}),
        # 4. Hybrid keyword + semantic
        ("Search for ‘use cases’ with keyword ‘roundtable’ in #genai-use-case-roundtable, returning the top 3 results.", {"functionality": "search"}),
        # 5. Author filter
        ("List all messages by cristian_72225 in #👋introductions.", {"functionality": "search"}),
        # 6. Channel-ID filter with ISO times
        ("Retrieve messages in channel ID 1365732945859444767 (📢announcements-admin) between 2025-04-20T00:00:00Z and 2025-04-25T23:59:59Z, top 5.", {"functionality": "search"}),
        # 7. Plain-text summarization (relative)
        ("Summarize messages from last weekend in #🏘general-chat.", {"functionality": "summarize"}),
        # 8. JSON summarization (absolute)
        ("Summarize messages from 2025-04-01 to 2025-04-30 in #🛠ai-practical-applications as JSON.", {"functionality": "summarize"}),
        # 9. Plain-text summarization (absolute)
        ("What were the key discussion points in #🤖intro-to-agentic-ai between 2025-04-22 and 2025-04-24?", {"functionality": "summarize"}),
        # 10. Skill-term extraction
        ("Extract all skills mentioned by darkgago in #🛠ai-practical-applications over the past month.", {"functionality": "search"}),
        # 11. Semantic-only reranking
        ("Find the 3 most semantically similar messages to ‘invite link restrictions’ across all channels.", {"functionality": "search"}),
        # 12. Empty-query guard
        ("", {"functionality": "error_handling", "raises": ValueError, "msg": "Query cannot be empty"}),
        # 13. Invalid timeframe
        ("Search messages from 2025-04-26 to 2025-04-23 in #🏘general-chat.", {"functionality": "error_handling", "msg": "End time must be after start time"}),
        # 14. Unknown channel
        ("Search for ‘bug’ in #nonexistent-channel.", {"functionality": "error_handling", "msg": "Unknown channel"}),
        # 15. Fallback/clarification prompt
        ("Tell me something interesting.", {"functionality": "error_handling", "msg": "Which channel, timeframe, or keyword"}),
        # 16. Combined multi-criteria
        ("In #📥feedback-submissions, find the top 2 messages about ‘suggestions’ by laura.neder between last Friday and yesterday, then summarize them.", {"functionality": "summarize"}),
        # 17. Implicit channel name parsing
        ("What was discussed about ‘help’ on 2025-04-18 in the discord-help channel?", {"functionality": "search"}),
        # 18. JSON summary key validation
        ("Summarize this week in #❓q-and-a-questions as JSON and ensure the output has both `summary` and `note` fields.", {"functionality": "summarize", "json_keys": ["summary", "note"]}),
        # 19. Jump-URL accuracy
        ("Give me the 5 most recent messages in #🏘general-chat with jump URLs.", {"functionality": "search"}),
        # 20. Empty-channel search
        ("Retrieve messages in channel ID 1364250555467300976 (📩midweek-request) between 2025-04-20 and 2025-04-25.", {"functionality": "search", "expect_empty": True}),
    ])
    def test_balanced_suite(query, expected_behavior):
        if expected_behavior.get("raises"):
            with pytest.raises(expected_behavior["raises"]):
                get_agent_answer(query)
            return
>       result = get_agent_answer(query)

tests/test_agent_integration.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = 'What was discussed about ‘help’ on 2025-04-18 in the discord-help channel?'

    def get_agent_answer(query: str) -> Any:
        """
        Send the user's raw query to the function-calling agent.
    
        Args:
            query: The user's question or request
    
        Returns:
            The agent's response
    
        Raises:
            ValueError: If the query is empty
            Exception: For other errors during agent execution
        """
        if not query.strip():
            raise ValueError("Query cannot be empty")
    
        try:
            return agent.run(query)
        except Exception as e:
>           raise Exception(f"Agent failed to process query: {str(e)}")
E           Exception: Agent failed to process query: Unknown channel: discord-help

core/agent.py:113: Exception
----------------------------- Captured stdout call -----------------------------


[1m> Entering new AgentExecutor chain...[0m
[32;1m[1;3m
Invoking: `summarize_messages` with `{'start_iso': '2025-04-18T00:00:00Z', 'end_iso': '2025-04-18T23:59:59Z', 'channel_name': 'discord-help'}`


[0m
DEBUG: Query Parameters:
Start ISO: 2025-04-18T00:00:00Z
End ISO: 2025-04-18T23:59:59Z
Guild ID: None
Channel ID: None
Channel Name: discord-help

DEBUG: Parsed Timestamps:
Start: 2025-04-18 00:00:00+00:00
End: 2025-04-18 23:59:59+00:00
_ test_balanced_suite[Summarize this week in #\u2753q-and-a-questions as JSON and ensure the output has both `summary` and `note` fields.-expected_behavior17] _

query = 'Summarize this week in #❓q-and-a-questions as JSON and ensure the output has both `summary` and `note` fields.'
expected_behavior = {'functionality': 'summarize', 'json_keys': ['summary', 'note']}

    @pytest.mark.parametrize("query,expected_behavior", [
        # 1. Validate data availability
        ("What data is currently cached?", {"functionality": "data_availability"}),
        # 2. Basic keyword search
        ("Find messages containing ‘AI ethics’ in #📚ai-philosophy-ethics.", {"functionality": "search"}),
        # 3. Top-K override
        ("Show me the top 4 messages mentioning ‘welcome’ in #📝welcome-rules.", {"functionality": "search"}),
        # 4. Hybrid keyword + semantic
        ("Search for ‘use cases’ with keyword ‘roundtable’ in #genai-use-case-roundtable, returning the top 3 results.", {"functionality": "search"}),
        # 5. Author filter
        ("List all messages by cristian_72225 in #👋introductions.", {"functionality": "search"}),
        # 6. Channel-ID filter with ISO times
        ("Retrieve messages in channel ID 1365732945859444767 (📢announcements-admin) between 2025-04-20T00:00:00Z and 2025-04-25T23:59:59Z, top 5.", {"functionality": "search"}),
        # 7. Plain-text summarization (relative)
        ("Summarize messages from last weekend in #🏘general-chat.", {"functionality": "summarize"}),
        # 8. JSON summarization (absolute)
        ("Summarize messages from 2025-04-01 to 2025-04-30 in #🛠ai-practical-applications as JSON.", {"functionality": "summarize"}),
        # 9. Plain-text summarization (absolute)
        ("What were the key discussion points in #🤖intro-to-agentic-ai between 2025-04-22 and 2025-04-24?", {"functionality": "summarize"}),
        # 10. Skill-term extraction
        ("Extract all skills mentioned by darkgago in #🛠ai-practical-applications over the past month.", {"functionality": "search"}),
        # 11. Semantic-only reranking
        ("Find the 3 most semantically similar messages to ‘invite link restrictions’ across all channels.", {"functionality": "search"}),
        # 12. Empty-query guard
        ("", {"functionality": "error_handling", "raises": ValueError, "msg": "Query cannot be empty"}),
        # 13. Invalid timeframe
        ("Search messages from 2025-04-26 to 2025-04-23 in #🏘general-chat.", {"functionality": "error_handling", "msg": "End time must be after start time"}),
        # 14. Unknown channel
        ("Search for ‘bug’ in #nonexistent-channel.", {"functionality": "error_handling", "msg": "Unknown channel"}),
        # 15. Fallback/clarification prompt
        ("Tell me something interesting.", {"functionality": "error_handling", "msg": "Which channel, timeframe, or keyword"}),
        # 16. Combined multi-criteria
        ("In #📥feedback-submissions, find the top 2 messages about ‘suggestions’ by laura.neder between last Friday and yesterday, then summarize them.", {"functionality": "summarize"}),
        # 17. Implicit channel name parsing
        ("What was discussed about ‘help’ on 2025-04-18 in the discord-help channel?", {"functionality": "search"}),
        # 18. JSON summary key validation
        ("Summarize this week in #❓q-and-a-questions as JSON and ensure the output has both `summary` and `note` fields.", {"functionality": "summarize", "json_keys": ["summary", "note"]}),
        # 19. Jump-URL accuracy
        ("Give me the 5 most recent messages in #🏘general-chat with jump URLs.", {"functionality": "search"}),
        # 20. Empty-channel search
        ("Retrieve messages in channel ID 1364250555467300976 (📩midweek-request) between 2025-04-20 and 2025-04-25.", {"functionality": "search", "expect_empty": True}),
    ])
    def test_balanced_suite(query, expected_behavior):
        if expected_behavior.get("raises"):
            with pytest.raises(expected_behavior["raises"]):
                get_agent_answer(query)
            return
        result = get_agent_answer(query)
        # Error handling/clarification/fallback
        if expected_behavior["functionality"] == "error_handling":
            if "msg" in expected_behavior:
                assert expected_behavior["msg"].lower() in str(result).lower()
            else:
                ai_eval = ai_validate_response(query, result, functionality="error_handling")
                assert ai_eval.startswith("PASS"), f"AI validation failed: {ai_eval}"
            return
        # JSON summary key validation
        if expected_behavior.get("json_keys"):
>           assert isinstance(result, dict), "Expected JSON output"
E           AssertionError: Expected JSON output
E           assert False
E            +  where False = isinstance('{\n  "summary": "This week in #❓q-and-a-questions, the channel featured a series of thought-provoking questions from various buddy groups, focusing on the challenges and opportunities of integrating generative AI into different domains. Key topics included: system-level explainability and traceability in modular AI environments; the impact of U.S. research funding cuts and whether AI can fill the gap left by departing scientists; balancing governance frameworks like ISO/IEC 42001 with innovation; integrating LLMs with enterprise systems and ensuring auditability; design principles for maintainability in agentic AI; adopting AI in the workplace without causing job displacement fears; ethical considerations for human-like multimodal AI interfaces; the challenges of AI-driven healthcare (e.g., AI hospitals in China); validating AI agent behavior in production; and management strategies for addressing employee resistance to AI adoption.",\n  "note": "The questions this week reflect a strong focus on both the technical and ethical dimensions of AI deployment, with an emphasis on real-world integration, governance, and human factors. Many questions were attributed to specific buddy groups, showing active participation and collaboration across the community."\n}', dict)

tests/test_agent_integration.py:139: AssertionError
----------------------------- Captured stdout call -----------------------------


[1m> Entering new AgentExecutor chain...[0m
[32;1m[1;3m
Invoking: `validate_data_availability` with `{}`


[0m[38;5;200m[1;3m{'status': 'ok', 'message': 'Data available', 'count': 4492, 'channels': {'genai-use-case-roundtable': 8, 'showcase': 29, '❌💻non-coders-learning': 199, '❓buddy-support': 24, '❓q-and-a-questions': 25, '🌎-community': 97, '🌐official-site': 1, '🎓-classes': 8, '🎥meeting-recordings': 33, '🎯admin-onboarding': 9, '🎯onboarding': 5, '🏘admin-general-chat': 239, '🏘general-chat': 651, '🏛netarch-general': 379, '🏛🗣netarch-content': 15, '🏛🤖netarch-agents': 68, '👋admin-introductions': 2, '👋introductions': 140, '👾discord-managers': 174, '💠buddy-group1': 59, '💠buddy-group10': 50, '💠buddy-group11': 53, '💠buddy-group12': 19, '💠buddy-group2': 119, '💠buddy-group3': 63, '💠buddy-group5': 95, '💠buddy-group6': 41, '💠buddy-group7': 62, '💠buddy-group8': 92, '💠buddy-group9': 110, '💬convo-leaders-prompts': 6, '💬live-chat': 16, '💬questions-help': 5, '💵financial-services': 22, '💻learning-without-coding-skills': 20, '💼career-opportunities': 59, '📄papers-and-publications': 27, '📖resources-library': 29, '📚ai-philosophy-ethics': 151, '📝q-and-a-polls': 13, '📝welcome-rules': 6, '📣general-announcements': 50, '📥feedback-submissions': 27, '📥member-of-the-week-submissions': 14, '📥socialmedia-submissions': 2, '📩midweek-request': 1, '📸-social-media': 4, '📸content-creation-chat': 3, '🔐cyber‑report‑desk': 6, '🗂sgu-managers-resources': 23, '🗃gen-ai-use-cases': 37, '🗞genai-news': 30, '🗣convo-leaders-chat': 131, '🙋member-of-the-week-poll': 36, '\U0001f6dddiscord-pg': 142, '\U0001f6dddiscord-pg-sgu': 14, '🛠-workshops': 4, '🛠ai-practical-applications': 77, '🛠it-support': 62, '🤖agent-dev': 2, '🤖workshops': 56, '🤝find-a-buddy': 104, '🦾sgu-managers': 277, '🧠feedback-workshop': 80, '🧢buddy-group4': 87}, 'date_range': {'oldest': '2025-03-27T21:03:27.683000', 'newest': '2025-05-16T16:33:38.673000'}}[0m[32;1m[1;3m
Invoking: `summarize_messages` with `{'start_iso': '2025-05-10T00:00:00Z', 'end_iso': '2025-05-16T23:59:59Z', 'channel_name': '❓q-and-a-questions', 'as_json': True}`


[0m
DEBUG: Query Parameters:
Start ISO: 2025-05-10T00:00:00Z
End ISO: 2025-05-16T23:59:59Z
Guild ID: None
Channel ID: None
Channel Name: ❓q-and-a-questions

DEBUG: Parsed Timestamps:
Start: 2025-05-10 00:00:00+00:00
End: 2025-05-16 23:59:59+00:00

DEBUG: SQL Query:
SELECT messages.id, messages.guild_id, messages.channel_id, messages.channel_name, messages.message_id, messages.content, messages.timestamp, messages.author, messages.mention_ids, messages.reactions, messages.jump_url 
FROM messages 
WHERE messages.timestamp BETWEEN '2025-05-10 00:00:00+00:00' AND '2025-05-16 23:59:59+00:00' AND messages.channel_id = 1353449293717180467

DEBUG: Query Results:
Number of messages found: 11
First message timestamp: 2025-05-15 10:23:06.040000
Last message timestamp: 2025-05-15 22:01:30.139000
[33;1m[1;3m{'timeframe': 'From 2025-05-10 to 2025-05-16 UTC', 'channel': '❓q-and-a-questions', 'messages': [{'author': {'username': 'kiss_ambassador', 'display_name': '', 'id': '1362326150373966035'}, 'timestamp': '2025-05-15T10:23:06.040000', 'content': '🧢 Here is the question from **Buddy Group 4**:\n“As generative AI systems scale and integrate across domains (from content to decision-making tools), should we rethink ‘explainability’ as a system-level property rather than a model feature? What new patterns or architectural shifts could support end-to-end traceability and contextual reasoning in increasingly modular and agentic AI environments?”', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353449293717180467/1372519655444451369', 'channel_name': '❓q-and-a-questions', 'guild_id': 1353058864810950737, 'channel_id': 1353449293717180467, 'message_id': 1372519655444451369}, {'author': {'username': 'kiss_ambassador', 'display_name': '', 'id': '1362326150373966035'}, 'timestamp': '2025-05-15T10:29:30.285000', 'content': 'Special remark to <@1365074657446723624> you kept your question short an sweet. Well done👏', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353449293717180467/1372521267084918805', 'channel_name': '❓q-and-a-questions', 'guild_id': 1353058864810950737, 'channel_id': 1353449293717180467, 'message_id': 1372521267084918805}, {'author': {'username': 'apoorvgarg88', 'display_name': '', 'id': '1335299567440367757'}, 'timestamp': '2025-05-15T13:01:04.688000', 'content': '🏛️Here is the question from Buddy Group 8:\n\nWith U.S. research funding cuts — especially from the DOGE— top scientists are leaving for better support abroad, accelerating a growing brain drain (Business Insider, May 2025).\n\nCan AI meaningfully replace the loss of human scientific talent? Could generative AI or autonomous research tools fill this gap — or are we overestimating what AI can do without the insight, creativity, and mentorship of human scientists? \n\nSpecial remarks to <@1365814219932565615> for bringing this important topic for discussion!', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353449293717180467/1372559411775799296', 'channel_name': '❓q-and-a-questions', 'guild_id': 1353058864810950737, 'channel_id': 1353449293717180467, 'message_id': 1372559411775799296}, {'author': {'username': 'andreahickethier', 'display_name': '', 'id': '1361976806651068517'}, 'timestamp': '2025-05-15T14:07:57.013000', 'content': 'Buddy Group no 1, we are keeping the question from last week. In dynamic AI environments, how can we implement ISO-like governance frameworks (e.g. ISO/IEC 42001) without stifling agility and innovation? What are key design patterns that balance certifiability with adaptiveness?', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353449293717180467/1372576240686338201', 'channel_name': '❓q-and-a-questions', 'guild_id': 1353058864810950737, 'channel_id': 1353449293717180467, 'message_id': 1372576240686338201}, {'author': {'username': 'eduardofadanelli', 'display_name': '', 'id': '1087795330067742760'}, 'timestamp': '2025-05-15T14:32:25.442000', 'content': 'Here is the question from Buddy Group 6:\n\nHow complex is it to integrate LLM models with existing enterprise systems such as CRMs, ERPs, or automation platforms, and what tools are available to ensure the traceability, explainability, and auditability of those models?\nThanks for Miguel Angel Calzada for bringing this topic for us.👍', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353449293717180467/1372582399724097637', 'channel_name': '❓q-and-a-questions', 'guild_id': 1353058864810950737, 'channel_id': 1353449293717180467, 'message_id': 1372582399724097637}, {'author': {'username': 'jhorden2211', 'display_name': '', 'id': '691008994789163020'}, 'timestamp': '2025-05-15T17:34:00.451000', 'content': 'Here is the question from Buddy Group 5:\n\nAs generative AI systems become increasingly agentic and capable of complex autonomous tasks, what design principles and architectural choices are essential to ensure maintainability and debuggability over time – especially to avoid the upfront efficiency gains being lost to long-term technical debt?', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353449293717180467/1372628096704057344', 'channel_name': '❓q-and-a-questions', 'guild_id': 1353058864810950737, 'channel_id': 1353449293717180467, 'message_id': 1372628096704057344}, {'author': {'username': 'nura775', 'display_name': '', 'id': '1362171740104556584'}, 'timestamp': '2025-05-15T17:50:06.729000', 'content': 'Here is the question from Buddy Group 2: \n\nHow can companies adopt Generative AI to enhance employee productivity and engagement - without creating fear of job displacement?', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353449293717180467/1372632149567475722', 'channel_name': '❓q-and-a-questions', 'guild_id': 1353058864810950737, 'channel_id': 1353449293717180467, 'message_id': 1372632149567475722}, {'author': {'username': 'georgi8865', 'display_name': '', 'id': '969571634027589643'}, 'timestamp': '2025-05-15T18:33:52.091000', 'content': "Question from buddy group 3: \n\nAs AI-driven multimodal interfaces become more fluent and human-like, how can we ensure that users don't mistake these systems' responses for true understanding or agency? What ethical responsibilities arise in shaping the cues of collaboration and intelligence in such systems?", 'jump_url': 'https://discord.com/channels/1353058864810950737/1353449293717180467/1372643161133940967', 'channel_name': '❓q-and-a-questions', 'guild_id': 1353058864810950737, 'channel_id': 1353449293717180467, 'message_id': 1372643161133940967}, {'author': {'username': 'shabana_39556', 'display_name': '', 'id': '1357376692384960524'}, 'timestamp': '2025-05-15T19:12:17.764000', 'content': 'Question from buddy group 7:                                                                                          With the recent launch of  China’s first AI hospital featuring 42 AI doctors . What are the potential ethical and practical challenges of AI driven docs into our healthcare systems?. How can we ensure that AI doctors build  and maintain trust , comply with medical regulations and work seamlessly alongside human healthcare providers to provide optimal patient care ?', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353449293717180467/1372652831827300494', 'channel_name': '❓q-and-a-questions', 'guild_id': 1353058864810950737, 'channel_id': 1353449293717180467, 'message_id': 1372652831827300494}, {'author': {'username': 'apoorvgarg88', 'display_name': '', 'id': '1335299567440367757'}, 'timestamp': '2025-05-15T19:32:40.110000', 'content': '🗒️Question from Buddy Group 11 - How do we validate the behaviour of AI agents in production environments? Is continuous evaluation more important than pre-deployment certification?', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353449293717180467/1372657958718017556', 'channel_name': '❓q-and-a-questions', 'guild_id': 1353058864810950737, 'channel_id': 1353449293717180467, 'message_id': 1372657958718017556}, {'author': {'username': 'silkefinken', 'display_name': '', 'id': '1075075819807985714'}, 'timestamp': '2025-05-15T22:01:30.139000', 'content': 'Question from buddy group 10:  What will be the right attitude of management with regards to AI resistance from employees? Some companies seem to push AI-first rather broadly, e.g. making AI usage part of performance reviews etc. but will that be the right way forward?', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353449293717180467/1372695413974372444', 'channel_name': '❓q-and-a-questions', 'guild_id': 1353058864810950737, 'channel_id': 1353449293717180467, 'message_id': 1372695413974372444}]}[0m[32;1m[1;3m{
  "summary": "This week in #❓q-and-a-questions, the channel featured a series of thought-provoking questions from various buddy groups, focusing on the challenges and opportunities of integrating generative AI into different domains. Key topics included: system-level explainability and traceability in modular AI environments; the impact of U.S. research funding cuts and whether AI can fill the gap left by departing scientists; balancing governance frameworks like ISO/IEC 42001 with innovation; integrating LLMs with enterprise systems and ensuring auditability; design principles for maintainability in agentic AI; adopting AI in the workplace without causing job displacement fears; ethical considerations for human-like multimodal AI interfaces; the challenges of AI-driven healthcare (e.g., AI hospitals in China); validating AI agent behavior in production; and management strategies for addressing employee resistance to AI adoption.",
  "note": "The questions this week reflect a strong focus on both the technical and ethical dimensions of AI deployment, with an emphasis on real-world integration, governance, and human factors. Many questions were attributed to specific buddy groups, showing active participation and collaboration across the community."
}[0m

[1m> Finished chain.[0m
_ test_balanced_suite[Give me the 5 most recent messages in #\U0001f3d8general-chat with jump URLs.-expected_behavior18] _

query = 'Give me the 5 most recent messages in #🏘general-chat with jump URLs.'
expected_behavior = {'functionality': 'search'}

    @pytest.mark.parametrize("query,expected_behavior", [
        # 1. Validate data availability
        ("What data is currently cached?", {"functionality": "data_availability"}),
        # 2. Basic keyword search
        ("Find messages containing ‘AI ethics’ in #📚ai-philosophy-ethics.", {"functionality": "search"}),
        # 3. Top-K override
        ("Show me the top 4 messages mentioning ‘welcome’ in #📝welcome-rules.", {"functionality": "search"}),
        # 4. Hybrid keyword + semantic
        ("Search for ‘use cases’ with keyword ‘roundtable’ in #genai-use-case-roundtable, returning the top 3 results.", {"functionality": "search"}),
        # 5. Author filter
        ("List all messages by cristian_72225 in #👋introductions.", {"functionality": "search"}),
        # 6. Channel-ID filter with ISO times
        ("Retrieve messages in channel ID 1365732945859444767 (📢announcements-admin) between 2025-04-20T00:00:00Z and 2025-04-25T23:59:59Z, top 5.", {"functionality": "search"}),
        # 7. Plain-text summarization (relative)
        ("Summarize messages from last weekend in #🏘general-chat.", {"functionality": "summarize"}),
        # 8. JSON summarization (absolute)
        ("Summarize messages from 2025-04-01 to 2025-04-30 in #🛠ai-practical-applications as JSON.", {"functionality": "summarize"}),
        # 9. Plain-text summarization (absolute)
        ("What were the key discussion points in #🤖intro-to-agentic-ai between 2025-04-22 and 2025-04-24?", {"functionality": "summarize"}),
        # 10. Skill-term extraction
        ("Extract all skills mentioned by darkgago in #🛠ai-practical-applications over the past month.", {"functionality": "search"}),
        # 11. Semantic-only reranking
        ("Find the 3 most semantically similar messages to ‘invite link restrictions’ across all channels.", {"functionality": "search"}),
        # 12. Empty-query guard
        ("", {"functionality": "error_handling", "raises": ValueError, "msg": "Query cannot be empty"}),
        # 13. Invalid timeframe
        ("Search messages from 2025-04-26 to 2025-04-23 in #🏘general-chat.", {"functionality": "error_handling", "msg": "End time must be after start time"}),
        # 14. Unknown channel
        ("Search for ‘bug’ in #nonexistent-channel.", {"functionality": "error_handling", "msg": "Unknown channel"}),
        # 15. Fallback/clarification prompt
        ("Tell me something interesting.", {"functionality": "error_handling", "msg": "Which channel, timeframe, or keyword"}),
        # 16. Combined multi-criteria
        ("In #📥feedback-submissions, find the top 2 messages about ‘suggestions’ by laura.neder between last Friday and yesterday, then summarize them.", {"functionality": "summarize"}),
        # 17. Implicit channel name parsing
        ("What was discussed about ‘help’ on 2025-04-18 in the discord-help channel?", {"functionality": "search"}),
        # 18. JSON summary key validation
        ("Summarize this week in #❓q-and-a-questions as JSON and ensure the output has both `summary` and `note` fields.", {"functionality": "summarize", "json_keys": ["summary", "note"]}),
        # 19. Jump-URL accuracy
        ("Give me the 5 most recent messages in #🏘general-chat with jump URLs.", {"functionality": "search"}),
        # 20. Empty-channel search
        ("Retrieve messages in channel ID 1364250555467300976 (📩midweek-request) between 2025-04-20 and 2025-04-25.", {"functionality": "search", "expect_empty": True}),
    ])
    def test_balanced_suite(query, expected_behavior):
        if expected_behavior.get("raises"):
            with pytest.raises(expected_behavior["raises"]):
                get_agent_answer(query)
            return
        result = get_agent_answer(query)
        # Error handling/clarification/fallback
        if expected_behavior["functionality"] == "error_handling":
            if "msg" in expected_behavior:
                assert expected_behavior["msg"].lower() in str(result).lower()
            else:
                ai_eval = ai_validate_response(query, result, functionality="error_handling")
                assert ai_eval.startswith("PASS"), f"AI validation failed: {ai_eval}"
            return
        # JSON summary key validation
        if expected_behavior.get("json_keys"):
            assert isinstance(result, dict), "Expected JSON output"
            for key in expected_behavior["json_keys"]:
                assert key in result, f"Missing key '{key}' in JSON summary"
        # Expect empty result
        if expected_behavior.get("expect_empty"):
            assert result == [] or result == {} or not result, "Expected empty result for empty channel search"
            return
        # Standard AI validation
        ai_eval = ai_validate_response(query, result, functionality=expected_behavior["functionality"])
>       assert ai_eval.startswith("PASS"), f"AI validation failed: {ai_eval}"
E       AssertionError: AI validation failed: FAIL
E         
E         Explanation: The user asked for the 5 most recent messages in #🏘general-chat with jump URLs. The agent returned only the author, timestamp, and jump URL, but not the message content. Message content is a critical part of a Discord message, and should always be included unless the user specifically says otherwise. The user did not specify that empty content is acceptable, so the agent response is incomplete.
E       assert False
E        +  where False = <built-in method startswith of str object at 0x107052400>('PASS')
E        +    where <built-in method startswith of str object at 0x107052400> = 'FAIL\n\nExplanation: The user asked for the 5 most recent messages in #🏘general-chat with jump URLs. The agent returned only the author, timestamp, and jump URL, but not the message content. Message content is a critical part of a Discord message, and should always be included unless the user specifically says otherwise. The user did not specify that empty content is acceptable, so the agent response is incomplete.'.startswith

tests/test_agent_integration.py:148: AssertionError
----------------------------- Captured stdout call -----------------------------


[1m> Entering new AgentExecutor chain...[0m
[32;1m[1;3m
Invoking: `search_messages` with `{'k': 5, 'channel_name': '🏘general-chat'}`


[0m[36;1m[1;3m[{'author': {'id': '672229862085361664', 'username': 'peterparkerdata', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 3, 27, 21, 3, 27, 683000), 'content': '', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353058864810950740/1354923802080837672', 'channel_name': '🏘general-chat', 'guild_id': 1353058864810950737, 'channel_id': 1353058864810950740, 'message_id': 1354923802080837672}, {'author': {'id': '1063015906650902549', 'username': 'snowflake1974', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 4, 10, 14, 19, 39, 259000), 'content': '', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353058864810950740/1359895610823676154', 'channel_name': '🏘general-chat', 'guild_id': 1353058864810950737, 'channel_id': 1353058864810950740, 'message_id': 1359895610823676154}, {'author': {'id': '792172361062678568', 'username': 'kid.psilo', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 4, 10, 18, 23, 50, 395000), 'content': '', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353058864810950740/1359957062141870080', 'channel_name': '🏘general-chat', 'guild_id': 1353058864810950737, 'channel_id': 1353058864810950740, 'message_id': 1359957062141870080}, {'author': {'id': '1359955242438889545', 'username': 'marie007532', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 4, 10, 18, 24, 36, 28000), 'content': '', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353058864810950740/1359957253540548808', 'channel_name': '🏘general-chat', 'guild_id': 1353058864810950737, 'channel_id': 1353058864810950740, 'message_id': 1359957253540548808}, {'author': {'id': '1357372349632221420', 'username': 'naeem_91404', 'discriminator': '0'}, 'timestamp': datetime.datetime(2025, 4, 10, 18, 25, 5, 115000), 'content': '', 'jump_url': 'https://discord.com/channels/1353058864810950737/1353058864810950740/1359957375540531230', 'channel_name': '🏘general-chat', 'guild_id': 1353058864810950737, 'channel_id': 1353058864810950740, 'message_id': 1359957375540531230}][0m[32;1m[1;3mHere are the 5 most recent messages in #🏘general-chat with their jump URLs:

1. [Message by naeem_91404 (2025-04-10 18:25:05)](https://discord.com/channels/1353058864810950737/1353058864810950740/1359957375540531230)
2. [Message by marie007532 (2025-04-10 18:24:36)](https://discord.com/channels/1353058864810950737/1353058864810950740/1359957253540548808)
3. [Message by kid.psilo (2025-04-10 18:23:50)](https://discord.com/channels/1353058864810950737/1353058864810950740/1359957062141870080)
4. [Message by snowflake1974 (2025-04-10 14:19:39)](https://discord.com/channels/1353058864810950737/1353058864810950740/1359895610823676154)
5. [Message by peterparkerdata (2025-03-27 21:03:27)](https://discord.com/channels/1353058864810950737/1353058864810950740/1354923802080837672)

Note: The message content is empty for these messages. If you need messages with content, let me know![0m

[1m> Finished chain.[0m
_ test_balanced_suite[Retrieve messages in channel ID 1364250555467300976 (\U0001f4e9midweek-request) between 2025-04-20 and 2025-04-25.-expected_behavior19] _

query = 'Retrieve messages in channel ID 1364250555467300976 (📩midweek-request) between 2025-04-20 and 2025-04-25.'
expected_behavior = {'expect_empty': True, 'functionality': 'search'}

    @pytest.mark.parametrize("query,expected_behavior", [
        # 1. Validate data availability
        ("What data is currently cached?", {"functionality": "data_availability"}),
        # 2. Basic keyword search
        ("Find messages containing ‘AI ethics’ in #📚ai-philosophy-ethics.", {"functionality": "search"}),
        # 3. Top-K override
        ("Show me the top 4 messages mentioning ‘welcome’ in #📝welcome-rules.", {"functionality": "search"}),
        # 4. Hybrid keyword + semantic
        ("Search for ‘use cases’ with keyword ‘roundtable’ in #genai-use-case-roundtable, returning the top 3 results.", {"functionality": "search"}),
        # 5. Author filter
        ("List all messages by cristian_72225 in #👋introductions.", {"functionality": "search"}),
        # 6. Channel-ID filter with ISO times
        ("Retrieve messages in channel ID 1365732945859444767 (📢announcements-admin) between 2025-04-20T00:00:00Z and 2025-04-25T23:59:59Z, top 5.", {"functionality": "search"}),
        # 7. Plain-text summarization (relative)
        ("Summarize messages from last weekend in #🏘general-chat.", {"functionality": "summarize"}),
        # 8. JSON summarization (absolute)
        ("Summarize messages from 2025-04-01 to 2025-04-30 in #🛠ai-practical-applications as JSON.", {"functionality": "summarize"}),
        # 9. Plain-text summarization (absolute)
        ("What were the key discussion points in #🤖intro-to-agentic-ai between 2025-04-22 and 2025-04-24?", {"functionality": "summarize"}),
        # 10. Skill-term extraction
        ("Extract all skills mentioned by darkgago in #🛠ai-practical-applications over the past month.", {"functionality": "search"}),
        # 11. Semantic-only reranking
        ("Find the 3 most semantically similar messages to ‘invite link restrictions’ across all channels.", {"functionality": "search"}),
        # 12. Empty-query guard
        ("", {"functionality": "error_handling", "raises": ValueError, "msg": "Query cannot be empty"}),
        # 13. Invalid timeframe
        ("Search messages from 2025-04-26 to 2025-04-23 in #🏘general-chat.", {"functionality": "error_handling", "msg": "End time must be after start time"}),
        # 14. Unknown channel
        ("Search for ‘bug’ in #nonexistent-channel.", {"functionality": "error_handling", "msg": "Unknown channel"}),
        # 15. Fallback/clarification prompt
        ("Tell me something interesting.", {"functionality": "error_handling", "msg": "Which channel, timeframe, or keyword"}),
        # 16. Combined multi-criteria
        ("In #📥feedback-submissions, find the top 2 messages about ‘suggestions’ by laura.neder between last Friday and yesterday, then summarize them.", {"functionality": "summarize"}),
        # 17. Implicit channel name parsing
        ("What was discussed about ‘help’ on 2025-04-18 in the discord-help channel?", {"functionality": "search"}),
        # 18. JSON summary key validation
        ("Summarize this week in #❓q-and-a-questions as JSON and ensure the output has both `summary` and `note` fields.", {"functionality": "summarize", "json_keys": ["summary", "note"]}),
        # 19. Jump-URL accuracy
        ("Give me the 5 most recent messages in #🏘general-chat with jump URLs.", {"functionality": "search"}),
        # 20. Empty-channel search
        ("Retrieve messages in channel ID 1364250555467300976 (📩midweek-request) between 2025-04-20 and 2025-04-25.", {"functionality": "search", "expect_empty": True}),
    ])
    def test_balanced_suite(query, expected_behavior):
        if expected_behavior.get("raises"):
            with pytest.raises(expected_behavior["raises"]):
                get_agent_answer(query)
            return
        result = get_agent_answer(query)
        # Error handling/clarification/fallback
        if expected_behavior["functionality"] == "error_handling":
            if "msg" in expected_behavior:
                assert expected_behavior["msg"].lower() in str(result).lower()
            else:
                ai_eval = ai_validate_response(query, result, functionality="error_handling")
                assert ai_eval.startswith("PASS"), f"AI validation failed: {ai_eval}"
            return
        # JSON summary key validation
        if expected_behavior.get("json_keys"):
            assert isinstance(result, dict), "Expected JSON output"
            for key in expected_behavior["json_keys"]:
                assert key in result, f"Missing key '{key}' in JSON summary"
        # Expect empty result
        if expected_behavior.get("expect_empty"):
>           assert result == [] or result == {} or not result, "Expected empty result for empty channel search"
E           AssertionError: Expected empty result for empty channel search
E           assert ('There are no messages in the channel 📩midweek-request (ID: 1364250555467300976) between April 20, 2025, and April 25, 2025. If you need information from a different date range or channel, please let me know!' == [] or 'There are no messages in the channel 📩midweek-request (ID: 1364250555467300976) between April 20, 2025, and April 25, 2025. If you need information from a different date range or channel, please let me know!' == {} or not 'There are no messages in the channel 📩midweek-request (ID: 1364250555467300976) between April 20, 2025, and April 25, 2025. If you need information from a different date range or channel, please let me know!')

tests/test_agent_integration.py:144: AssertionError
----------------------------- Captured stdout call -----------------------------


[1m> Entering new AgentExecutor chain...[0m
[32;1m[1;3m
Invoking: `summarize_messages` with `{'start_iso': '2025-04-20T00:00:00Z', 'end_iso': '2025-04-25T23:59:59Z', 'channel_id': 1364250555467300976}`


[0m
DEBUG: Query Parameters:
Start ISO: 2025-04-20T00:00:00Z
End ISO: 2025-04-25T23:59:59Z
Guild ID: None
Channel ID: 1364250555467300976
Channel Name: None

DEBUG: Parsed Timestamps:
Start: 2025-04-20 00:00:00+00:00
End: 2025-04-25 23:59:59+00:00

DEBUG: SQL Query:
SELECT messages.id, messages.guild_id, messages.channel_id, messages.channel_name, messages.message_id, messages.content, messages.timestamp, messages.author, messages.mention_ids, messages.reactions, messages.jump_url 
FROM messages 
WHERE messages.timestamp BETWEEN '2025-04-20 00:00:00+00:00' AND '2025-04-25 23:59:59+00:00' AND messages.channel_id = 1364250555467300976

DEBUG: Query Results:
Number of messages found: 0
[33;1m[1;3m⚠️ No messages found in the specified timeframe.[0m[32;1m[1;3mThere are no messages in the channel 📩midweek-request (ID: 1364250555467300976) between April 20, 2025, and April 25, 2025. If you need information from a different date range or channel, please let me know![0m

[1m> Finished chain.[0m
=============================== warnings summary ===============================
venv/lib/python3.9/site-packages/langchain/chat_models/__init__.py:33
venv/lib/python3.9/site-packages/langchain/chat_models/__init__.py:33
  /Users/jose/Documents/discord-bot/venv/lib/python3.9/site-packages/langchain/chat_models/__init__.py:33: LangChainDeprecationWarning: Importing chat models from langchain is deprecated. Importing from langchain will no longer be supported as of langchain==0.2.0. Please import from langchain-community instead:
  
  `from langchain_community.chat_models import ChatOpenAI`.
  
  To install langchain-community run `pip install -U langchain-community`.
    warnings.warn(

tools/tools.py:69
  /Users/jose/Documents/discord-bot/tools/tools.py:69: LangChainDeprecationWarning: The class `OpenAIEmbeddings` was deprecated in LangChain 0.0.9 and will be removed in 1.0. An updated version of the class exists in the :class:`~langchain-openai package and should be used instead. To use it run `pip install -U :class:`~langchain-openai` and import as `from :class:`~langchain_openai import OpenAIEmbeddings``.
    _embedding = OpenAIEmbeddings(model=EMBED_MODEL, openai_api_key=OPENAI_API_KEY)

core/agent.py:20
  /Users/jose/Documents/discord-bot/core/agent.py:20: LangChainDeprecationWarning: The class `ChatOpenAI` was deprecated in LangChain 0.0.10 and will be removed in 1.0. An updated version of the class exists in the :class:`~langchain-openai package and should be used instead. To use it run `pip install -U :class:`~langchain-openai` and import as `from :class:`~langchain_openai import ChatOpenAI``.
    llm = ChatOpenAI(

core/agent.py:82
  /Users/jose/Documents/discord-bot/core/agent.py:82: LangChainDeprecationWarning: LangChain agents will continue to be supported, but it is recommended for new use cases to be built with LangGraph. LangGraph offers a more flexible and full-featured framework for building agents, including support for tool-calling, persistence of state, and human-in-the-loop workflows. For details, refer to the `LangGraph documentation <https://langchain-ai.github.io/langgraph/>`_ as well as guides for `Migrating from AgentExecutor <https://python.langchain.com/docs/how_to/migrate_agent/>`_ and LangGraph's `Pre-built ReAct agent <https://langchain-ai.github.io/langgraph/how-tos/create-react-agent/>`_.
    agent = initialize_agent(

tests/test_agent_integration.py::test_balanced_suite[What data is currently cached?-expected_behavior0]
  /Users/jose/Documents/discord-bot/core/agent.py:111: LangChainDeprecationWarning: The method `Chain.run` was deprecated in langchain 0.1.0 and will be removed in 1.0. Use :meth:`~invoke` instead.
    return agent.run(query)

tests/test_agent_integration.py: 38 warnings
  /Users/jose/Documents/discord-bot/venv/lib/python3.9/site-packages/langchain_community/chat_models/openai.py:495: PydanticDeprecatedSince20: The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    response = response.dict()

tests/test_agent_integration.py: 10 warnings
  /Users/jose/Documents/discord-bot/venv/lib/python3.9/site-packages/langchain_community/embeddings/openai.py:503: PydanticDeprecatedSince20: The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    response = response.dict()

tests/test_agent_integration.py::test_balanced_suite[Find messages containing \u2018AI ethics\u2019 in #\U0001f4daai-philosophy-ethics.-expected_behavior1]
  /Users/jose/Documents/discord-bot/venv/lib/python3.9/site-packages/faiss/loader.py:49: DeprecationWarning: numpy.core._multiarray_umath is deprecated and has been renamed to numpy._core._multiarray_umath. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core._multiarray_umath.__cpu_features__.
    from numpy.core._multiarray_umath import __cpu_features__

tests/test_agent_integration.py::test_balanced_suite[Find messages containing \u2018AI ethics\u2019 in #\U0001f4daai-philosophy-ethics.-expected_behavior1]
  <frozen importlib._bootstrap>:228: DeprecationWarning: builtin type SwigPyPacked has no __module__ attribute

tests/test_agent_integration.py::test_balanced_suite[Find messages containing \u2018AI ethics\u2019 in #\U0001f4daai-philosophy-ethics.-expected_behavior1]
  <frozen importlib._bootstrap>:228: DeprecationWarning: builtin type SwigPyObject has no __module__ attribute

tests/test_agent_integration.py::test_balanced_suite[Find messages containing \u2018AI ethics\u2019 in #\U0001f4daai-philosophy-ethics.-expected_behavior1]
  <frozen importlib._bootstrap>:228: DeprecationWarning: builtin type swigvarlink has no __module__ attribute

tests/test_agent_integration.py::test_balanced_suite[Find messages containing \u2018AI ethics\u2019 in #\U0001f4daai-philosophy-ethics.-expected_behavior1]
  /Users/jose/Documents/discord-bot/tools/tools.py:161: LangChainDeprecationWarning: The method `BaseRetriever.get_relevant_documents` was deprecated in langchain-core 0.1.46 and will be removed in 1.0. Use :meth:`~invoke` instead.
    docs = retriever.get_relevant_documents(query)

tests/test_agent_integration.py: 54 warnings
  /Users/jose/Documents/discord-bot/venv/lib/python3.9/site-packages/langchain_community/embeddings/openai.py:524: PydanticDeprecatedSince20: The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    average_embedded = average_embedded.dict()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
============ 12 failed, 9 passed, 113 warnings in 160.93s (0:02:40) ============
